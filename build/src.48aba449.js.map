{"version":3,"sources":["src/SliderManager.ts","src/app.ts","src/util/convert.ts","src/util/vector.ts","src/util/matrix.ts","src/shapes/shape.ts","src/shapes/initialPoints/util.ts","src/shapes/initialPoints/prismPoints.ts","src/shapes/initialPoints/cubePoints.ts","src/shapes/initialPoints/blockPoints.ts","src/shapes/initialPoints/index.ts","src/shapes/cube.ts","src/shapes/block.ts","src/shapes/triangularPrism.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.48aba449.js","sourceRoot":"..","sourcesContent":["type SliderId =\r\n  | \"x\"\r\n  | \"y\"\r\n  | \"z\"\r\n  | \"rotate-x\"\r\n  | \"rotate-y\"\r\n  | \"rotate-z\"\r\n  | \"zoom\"\r\n  | \"cam-radius\"\r\n  | \"cam-theta\"\r\n  | \"cam-phi\";\r\nconst sliderIds: SliderId[] = [\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n  \"rotate-x\",\r\n  \"rotate-y\",\r\n  \"rotate-z\",\r\n  \"zoom\",\r\n  \"cam-radius\",\r\n  \"cam-theta\",\r\n  \"cam-phi\",\r\n];\r\n\r\ntype Sliders = {\r\n  [sliderId: string]: HTMLInputElement;\r\n};\r\nconst sliders: Sliders = {};\r\ntype SliderIndicator = {\r\n  [sliderId: string]: HTMLSpanElement;\r\n};\r\nconst sliderIndicators: SliderIndicator = {};\r\ntype SliderDefaultValue = {\r\n  [sliderId: string]: number;\r\n};\r\nconst tSliderDefaultValues: SliderDefaultValue = {\r\n  x: 50,\r\n  y: 50,\r\n  z: 50,\r\n  \"rotate-x\": 0,\r\n  \"rotate-y\": 0,\r\n  \"rotate-z\": 0,\r\n  zoom: 1,\r\n};\r\nconst cSliderDefaultValues: SliderDefaultValue = {\r\n  \"cam-radius\": 0,\r\n  \"cam-theta\": 0,\r\n  \"cam-phi\": 0,\r\n};\r\n\r\nsliderIds.forEach((sliderId) => {\r\n  sliders[sliderId] = document.getElementById(sliderId) as HTMLInputElement;\r\n  sliderIndicators[`${sliderId}-value`] = document.getElementById(\r\n    `${sliderId}-value`,\r\n  ) as HTMLSpanElement;\r\n  sliderIndicators[`${sliderId}-value`].innerText = sliders[sliderId].value;\r\n});\r\n\r\nconst getSlider = (sliderId: SliderId) => sliders[sliderId];\r\n\r\nclass SliderManager {\r\n  static assignInputEvent(sliderId: SliderId, callback: Function) {\r\n    const elmt = getSlider(sliderId);\r\n    elmt.oninput = function () {\r\n      const value = this.value;\r\n      sliderIndicators[`${elmt.id}-value`].innerText = value;\r\n      callback(value);\r\n    };\r\n  }\r\n\r\n  static resetTransformSliderValue() {\r\n    sliderIds.forEach((sliderId) => {\r\n      if (tSliderDefaultValues.hasOwnProperty(sliderId)) {\r\n        sliders[sliderId].value = String(tSliderDefaultValues[sliderId]);\r\n        sliders[sliderId].dispatchEvent(new Event(\"input\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  static resetCameraSliderValue() {\r\n    sliderIds.forEach((sliderId) => {\r\n      if (cSliderDefaultValues.hasOwnProperty(sliderId)) {\r\n        sliders[sliderId].value = String(cSliderDefaultValues[sliderId]);\r\n        sliders[sliderId].dispatchEvent(new Event(\"input\"));\r\n      }\r\n    });\r\n  }\r\n}\r\nexport default SliderManager;\r\nexport {sliderIds};\r\n","import Shape from \"./shapes/shape\";\r\nimport SliderManager from \"./SliderManager\";\r\n\r\nconst X = 0;\r\nconst Y = 1;\r\nconst Z = 2;\r\n\r\nclass App {\r\n  private shape: Shape | null = null;\r\n\r\n  constructor() {}\r\n\r\n  initSliders() {\r\n    if (!this.shape) {\r\n      return;\r\n    }\r\n\r\n    const changeRotateOf = (index: number, degree: number) => {\r\n      if (!this.shape) {\r\n        return;\r\n      }\r\n      const newRotation = this.shape.getTransformation(\"rotate\");\r\n      newRotation[index] = degree;\r\n      this.shape.setTransformation(\"rotate\", newRotation);\r\n    };\r\n    const changeTranslateOf = (index: number, val: number) => {\r\n      if (!this.shape) {\r\n        return;\r\n      }\r\n      const newVal = this.shape.getTransformation(\"translate\");\r\n      newVal[index] = (val - 50) / 100;\r\n      this.shape.setTransformation(\"translate\", newVal);\r\n    };\r\n    const changeZoomOf = (val: number) => {\r\n      if (!this.shape) {\r\n        return;\r\n      }\r\n      this.shape.setTransformation(\"scale\", [val, val, val]);\r\n    };\r\n    const changeCameraPositionOf = (cameraSettingType: CameraSetting, newValue: number) => {\r\n      this.shape?.setCamera(cameraSettingType, newValue);\r\n    };\r\n\r\n    SliderManager.assignInputEvent(\"rotate-x\", (val: number) => {\r\n      changeRotateOf(X, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"rotate-y\", (val: number) => {\r\n      changeRotateOf(Y, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"rotate-z\", (val: number) => {\r\n      changeRotateOf(Z, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"x\", (val: number) => {\r\n      changeTranslateOf(X, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"y\", (val: number) => {\r\n      changeTranslateOf(Y, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"z\", (val: number) => {\r\n      changeTranslateOf(Z, val);\r\n    });\r\n    SliderManager.assignInputEvent(\"zoom\", (val: number) => {\r\n      changeZoomOf(val);\r\n    });\r\n    SliderManager.assignInputEvent(\"cam-radius\", (val: number) => {\r\n      changeCameraPositionOf(\"radius\", val);\r\n    });\r\n    SliderManager.assignInputEvent(\"cam-theta\", (val: number) => {\r\n      changeCameraPositionOf(\"theta\", val);\r\n    });\r\n    SliderManager.assignInputEvent(\"cam-phi\", (val: number) => {\r\n      changeCameraPositionOf(\"phi\", val);\r\n    });\r\n  }\r\n\r\n  start() {\r\n    if (!this.shape) {\r\n      throw \"No shape defined!\";\r\n    }\r\n    this.initSliders();\r\n    const loop = (time: number) => {\r\n      this.shape?.draw();\r\n      window.requestAnimationFrame(loop);\r\n    };\r\n    window.requestAnimationFrame(loop);\r\n  }\r\n\r\n  setShape(shape: Shape) {\r\n    this.shape = shape;\r\n  }\r\n\r\n  resetShape() {\r\n    SliderManager.resetTransformSliderValue();\r\n  }\r\n\r\n  resetCamera() {\r\n    SliderManager.resetCameraSliderValue();\r\n  }\r\n\r\n  resetAll() {\r\n    this.resetShape();\r\n    this.resetCamera();\r\n  }\r\n\r\n  setShapeProjection(projectionType: Projection) {\r\n    this.shape?.setProjection(projectionType);\r\n  }\r\n\r\n  toggleShading(useShading: boolean) {\r\n    this.shape?.setUseShading(useShading);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// Convert degree to radian\r\nconst toRadian = (degree: number) => (degree * Math.PI) / 180;\r\n\r\n// Convert spherical coordinate to cartesian\r\nconst toCartesian = (sphericalCoord: [number, number, number]) => {\r\n  // Notes: theta and phi in degree\r\n\r\n  // Unpack value\r\n  const [ radius, theta, phi ] = sphericalCoord;\r\n  const thetaInRadians = toRadian(theta);\r\n  const phiInRadians = toRadian(phi);\r\n\r\n  // Calculate cartesian coordinate\r\n  let cartesianCoord = [];\r\n  cartesianCoord.push(radius * Math.sin(thetaInRadians) * Math.cos(phiInRadians));  // x\r\n  cartesianCoord.push(radius * Math.sin(thetaInRadians) * Math.sin(phiInRadians));  // y\r\n  cartesianCoord.push(radius * Math.cos(thetaInRadians));  // z\r\n\r\n  // Return\r\n  return cartesianCoord;\r\n};\r\n\r\nexport {toRadian, toCartesian};\r\n","class vec {\r\n  static add = (v1: number[], v2: number[]) => {\r\n    if (v1.length != v2.length) {\r\n      throw \"vec.add: vector length must be equal\";\r\n    }\r\n\r\n    let res = [];\r\n    for (let i = 0; i < v1.length; i++) {\r\n      res.push(v1[i] + v2[i]);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  static sub = (v1: number[], v2: number[]) => {\r\n    if (v1.length != v2.length) {\r\n      throw \"vec.sub: vector length must be equal\";\r\n    }\r\n\r\n    let res = [];\r\n    for (let i = 0; i < v1.length; i++) {\r\n      res.push(v1[i] - v2[i]);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  static mul = (k: number, v: number[]) => {\r\n    let res = [];\r\n    for (const el of v) {\r\n      res.push(k * el);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  static dot = (v1: number[], v2: number[]) => {\r\n    if (v1.length != v2.length) {\r\n      throw \"vec.dot: vector length must be equal\";\r\n    }\r\n\r\n    let res = 0;\r\n    for (let i = 0; i < v1.length; i++) {\r\n      res += v1[i] * v2[i];\r\n    }\r\n    return res;\r\n  }\r\n\r\n  static cross = (v1: number[], v2: number[]) => {\r\n    // Notes: only support vector with length == 3\r\n\r\n    if (v1.length != 3 ||  v2.length != 3) {\r\n      throw \"vec.cross: vector length must equal to 3\";\r\n    }\r\n\r\n    // prettier-ignore\r\n    return [\r\n      v1[1] * v2[2] - v1[2] * v2[1],\r\n      v1[2] * v2[0] - v1[0] * v2[2],\r\n      v1[0] * v2[1] - v1[1] * v2[0],\r\n    ];\r\n  }\r\n\r\n  static equal = (v1: number[], v2: number[]) => {\r\n    if (v1.length != v2.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < v1.length; i++) {\r\n      if (v1[i] != v2[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static len = (v: number[]) => {\r\n    return Math.sqrt(vec.dot(v, v));\r\n  }\r\n\r\n  static normalize = (v: number[]) => {\r\n    // Notes: the input array is not preserved, it is assumed that the length of v is not 0\r\n\r\n    const vLength = vec.len(v);\r\n    for (let i = 0; i < v.length; i++) {\r\n      v[i] /= vLength;\r\n    }\r\n    return v;\r\n  }\r\n}\r\n\r\nexport {vec};\r\n","import {toRadian} from \"./convert\";\r\nimport {vec} from \"./vector\";\r\n\r\ntype Point = [number, number, number];\r\ntype Matrix = number[];\r\n\r\nclass mat4 {\r\n  static dimention = 4;\r\n\r\n  static identity() {\r\n    // prettier-ignore\r\n    return [\r\n      1,  0,  0,  0,\r\n      0,  1,  0,  0,\r\n      0,  0,  1,  0,\r\n      0,  0,  0,  1\r\n    ];\r\n  }\r\n\r\n\r\n  /*\r\n   * Transformation matrices\r\n   */\r\n\r\n  static scale = (s1: number, s2: number, s3: number) => {\r\n    // prettier-ignore\r\n    return [\r\n      s1, 0,  0,  0,\r\n      0,  s2, 0,  0,\r\n      0,  0,  s3, 0,\r\n      0,  0,  0,  1\r\n    ];\r\n  }\r\n\r\n  static translation(tx: number, ty: number, tz: number) {\r\n    // prettier-ignore\r\n    return [\r\n      1,  0,  0,  0,\r\n      0,  1,  0,  0,\r\n      0,  0,  1,  0,\r\n      tx, ty, tz, 1\r\n    ];\r\n  }\r\n\r\n  static xRotation(angle: number) {\r\n    const angleInRadians = toRadian(angle);\r\n    const c = Math.cos(angleInRadians);\r\n    const s = Math.sin(angleInRadians);\r\n\r\n    // prettier-ignore\r\n    return [\r\n      1,  0,  0,  0,\r\n      0,  c,  s,  0,\r\n      0,  -s, c,  0,\r\n      0,  0,  0,  1\r\n    ];\r\n  }\r\n\r\n  static yRotation(angle: number) {\r\n    const angleInRadians = toRadian(angle);\r\n    const c = Math.cos(angleInRadians);\r\n    const s = Math.sin(angleInRadians);\r\n\r\n    // prettier-ignore\r\n    return [\r\n      c,  0,  -s, 0,\r\n      0,  1,  0,  0,\r\n      s,  0,  c,  0,\r\n      0,  0,  0,  1\r\n    ];\r\n  }\r\n\r\n  static zRotation(angle: number) {\r\n    const angleInRadians = toRadian(angle);\r\n    const c = Math.cos(angleInRadians);\r\n    const s = Math.sin(angleInRadians);\r\n\r\n    // prettier-ignore\r\n    return [\r\n      c,  s,  0,  0,\r\n      -s, c,  0,  0,\r\n      0,  0,  1,  0,\r\n      0,  0,  0,  1\r\n    ];\r\n  }\r\n\r\n\r\n  /*\r\n   * Projection matrices\r\n   */\r\n\r\n  static orthographicProj = (left: number = -1, right: number = 1,\r\n      bottom: number = -1, top: number = 1, near: number = -15, far: number = 15) => {\r\n\r\n    // Initial check\r\n    if (left == right || bottom == top || near == far) {\r\n      throw \"mat4.orthographicProj: invalid parameter(s)\";\r\n    }\r\n\r\n    // Calculate width, height, and depth\r\n    // Notes: far and near coordinates is reversed from z axis (z+ is -, vice versa)\r\n    const width = right - left;\r\n    const height = top - bottom;\r\n    const depth = far - near;\r\n\r\n    // prettier-ignore\r\n    return [\r\n      2 / width, 0, 0, 0,\r\n      0, 2 / height, 0, 0,\r\n      0, 0, -2 / depth, 0,\r\n      - (left + right) / width, - (top + bottom) / width, - (near + far) / depth,  1\r\n    ];\r\n  }\r\n\r\n  static obliqueProj = (theta: number = 10, phi: number = 10, left: number = -1, right: number = 1,\r\n      bottom: number = -1, top: number = 1, near: number = -15, far: number = 15) => {\r\n    // Notes: theta and phi is in degree, it is assumed that the cot of theta and phi is not infinity\r\n\r\n    // Convert theta and phi to radian\r\n    const ctgTheta = 1 / Math.tan(toRadian(theta));\r\n    const ctgPhi = 1 / Math.tan(toRadian(phi));\r\n\r\n    // Oblique == shear + orthographic\r\n    // prettier-ignore\r\n    return mat4.multiply(\r\n      mat4.orthographicProj(),\r\n      [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        -ctgTheta, -ctgPhi, 1, 0,\r\n        0, 0, 0, 1,\r\n      ]\r\n    );\r\n  }\r\n\r\n  static perspectiveProj = (fov: number = 90, aspect: number = 1, near: number = 0.01, far: number = 20) => {\r\n    // Notes: fov is in degree, it is assumed that the cot of fov is not infinity\r\n\r\n    const ctgHalfFov = 1 / Math.tan(toRadian(fov) / 2);\r\n    const depth = far - near;\r\n\r\n    // prettier-ignore\r\n    return [\r\n      ctgHalfFov / aspect, 0, 0, 0,\r\n      0, ctgHalfFov, 0, 0,\r\n      0, 0, - (near + far) / depth, -1,\r\n      0, 0, -2 * near * far / depth, 0,\r\n    ];\r\n  }\r\n\r\n\r\n  /*\r\n   * View matrix (used to control the camera)\r\n   */\r\n\r\n  static lookAt = (eye: Point, target: Point = [0, 0, 0], up: Point = [0, 1, 0]) => {\r\n    // Initial check\r\n    if (vec.equal(eye, target)) {\r\n      return mat4.identity();\r\n    }\r\n\r\n    var camView = vec.normalize(vec.sub(eye, target));\r\n    var camNorm = vec.normalize(vec.cross(up, camView));\r\n    var camUp = vec.normalize(vec.cross(camView, camNorm));\r\n\r\n    return mat4.inverse([\r\n       camNorm[0], camNorm[1], camNorm[2], 0,\r\n       camUp[0], camUp[1], camUp[2], 0,\r\n       camView[0], camView[1], camView[2], 0,\r\n       eye[0], eye[1], eye[2], 1,\r\n    ]);\r\n  }\r\n\r\n  private static submatrix3x3Det = (m: Matrix, ir: number, jr: number): number => {\r\n    // Get determinant of 3x3 submatrix of matrix 4x4 (removing row ir and col jr)\r\n    let sm = [];\r\n    let counter = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i == ir) {\r\n        counter += 4;\r\n        continue;\r\n      }\r\n\r\n      let row = [];\r\n      for (let j = 0; j < 4; j++) {\r\n        if (j == jr) {\r\n          counter++;\r\n          continue;\r\n        }\r\n\r\n        row.push(m[counter]);\r\n        counter++;\r\n      }\r\n      sm.push(row);\r\n    }\r\n\r\n    return ((sm[0][0] * sm[1][1] * sm[2][2]) + (sm[0][1] * sm[1][2] * sm[2][0]) + (sm[0][2] * sm[1][0] * sm[2][1])\r\n      - (sm[0][2] * sm[1][1] * sm[2][0]) - (sm[0][1] * sm[1][0] * sm[2][2]) - (sm[0][0] * sm[1][2] * sm[2][1]));\r\n  }\r\n\r\n  static inverse = (m: Matrix): Matrix => {\r\n    let adjM = Array(16);\r\n    let det = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        const koef = (i + j) % 2 == 0 ? 1 : -1;\r\n        const elem = koef * mat4.submatrix3x3Det(m, i, j);\r\n        if (j == 0) {\r\n          det += m[i * 4 + j] * elem;\r\n        }\r\n        adjM[j * 4 + i] = elem;\r\n      }\r\n    }\r\n\r\n    return adjM.map(el => el / det);\r\n  }\r\n\r\n\r\n  /*\r\n   * Utilities\r\n   */\r\n\r\n  static multiply = (matA: Matrix, matB: Matrix): Matrix => {\r\n    const out = [];\r\n    for (let i = 0; i < mat4.dimention; i++) {\r\n      for (let j = 0; j < mat4.dimention; j++) {\r\n        let temp = 0;\r\n        for (let k = 0; k < mat4.dimention; k++) {\r\n          temp += matA[i * mat4.dimention + k] * matB[k * mat4.dimention + j];\r\n        }\r\n        out.push(temp);\r\n      }\r\n    }\r\n    return out;\r\n  }\r\n\r\n  static mMult = (...args: Matrix[]) => {\r\n    let temp = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n      temp = mat4.multiply(temp, args[i]);\r\n    }\r\n    return temp;\r\n  }\r\n}\r\n\r\nexport {mat4};\r\n","import { toCartesian } from \"../util/convert\";\r\nimport { mat4 } from \"../util/matrix\";\r\n\r\nabstract class Shape {\r\n  // Webgl properties\r\n  protected gl: WebGL2RenderingContext;\r\n  protected program: WebGLProgram;\r\n\r\n  // Shape properties\r\n  protected dimention: number = 3;\r\n  protected points: number[] = [];\r\n  protected normals: number[] = [];\r\n\r\n  // Phong properties (light and material properties, light position)\r\n  protected Id: Color = [0.1953125, 0.50390625, 0.65625];\r\n  protected Is: Color = [0.6171875, 0.87109375, 0.99609375];\r\n  protected Ia: Color = [0.1953125, 0.50390625, 0.65625];\r\n  protected Kd: number[] = [1.0, 1.0, 1.0];\r\n  protected Ks: number[] = [1.0, 1.0, 1.0];\r\n  protected Ka: number[] = [0.25, 0.25, 0.25];\r\n  protected lightPosition: number[] = [1.0, 1.0, 1.0];\r\n  protected shininess: number = 100;\r\n\r\n  // Object transformations\r\n  protected translate: Point = [0, 0, 0];\r\n  protected rotate: Point = [0, 0, 0];\r\n  protected scale: Point = [1, 1, 1];\r\n  protected zoom: number = 1;\r\n\r\n  // Camera position or eye value (in spherical coordinate), format: (radius, theta, phi)\r\n  protected cameraPosition: [number, number, number] = [0, 0, 0];\r\n\r\n  // Matrices used\r\n  protected transformMatrix: number[] = mat4.identity();\r\n  protected viewMatrix: number[] = mat4.identity();\r\n  protected projMatrix: number[] = mat4.orthographicProj();\r\n\r\n  private useShading: 0 | 1 = 1;\r\n\r\n  constructor(protected canvas: HTMLCanvasElement) {\r\n    canvas.width = 800;\r\n    canvas.height = 800;\r\n\r\n    this.gl = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\r\n    this.gl.viewport(0, 0, canvas.width, canvas.height);\r\n    this.gl.enable(this.gl.DEPTH_TEST);\r\n    this.program = this.createProgram();\r\n    this.initMainShader(this.program);\r\n\r\n    this.calculateTransformMatrix();\r\n    this.calculateViewMatrix();\r\n    this.calculateWorldMatrix();\r\n    this.calculateProjectionMatrix();\r\n\r\n    this.setPhongProperties();\r\n    this.setUseShading(true);\r\n  }\r\n\r\n  protected initMainShader(program: WebGLProgram) {\r\n    const gl = this.gl;\r\n    const vShader = this.createCompiledShader(\r\n      gl.VERTEX_SHADER,\r\n      `\r\n      attribute vec3 position;\r\n      attribute vec3 vertNormal;\r\n\r\n      varying vec3 fragColor;\r\n      uniform vec3 lightPosition;\r\n      uniform int useShading;\r\n\r\n      // Light properties\r\n      uniform vec3 Id;\r\n      uniform vec3 Is;\r\n      uniform vec3 Ia;\r\n\r\n      // Material properties\r\n      uniform vec3 Kd;\r\n      uniform vec3 Ks;\r\n      uniform vec3 Ka;\r\n      uniform float shininess;\r\n\r\n      // Position matrices\r\n      uniform mat4 mTransform;\r\n      uniform mat4 mWorld;\r\n      uniform mat4 mView;\r\n      uniform mat4 mProj;\r\n\r\n      void main() {\r\n        gl_Position = mProj * mView * mWorld * mTransform * vec4(position, 1);\r\n\r\n        if (useShading == 1) {\r\n          // Build blinn phong model\r\n          vec3 vertPos = (mView * mWorld * mTransform * vec4(position, 1)).xyz;\r\n          vec3 L = normalize((mView * vec4(lightPosition, 1)).xyz - vertPos);\r\n          vec3 V = normalize(-vertPos);\r\n          vec3 H = normalize(L + V);\r\n          vec3 N = normalize((mView * mWorld * mTransform * vec4(vertNormal, 0)).xyz);\r\n\r\n          vec3 diffuse = Kd * Id * max(dot(L, N), 0.0);\r\n          vec3 specular = Ks * Is * pow(max(dot(N, H), 0.0), shininess);\r\n          vec3 ambient = Ka * Ia;\r\n\r\n          fragColor = diffuse + specular + ambient;\r\n        } else {\r\n          fragColor = vec3(0, 0, 0);\r\n        }\r\n      }\r\n      `,\r\n    );\r\n    const fShader = this.createCompiledShader(\r\n      gl.FRAGMENT_SHADER,\r\n      `\r\n      precision mediump float;\r\n\r\n      varying vec3 fragColor;\r\n\r\n      void main() {\r\n        gl_FragColor = vec4(fragColor, 1);\r\n      }\r\n      `,\r\n    );\r\n    this.setupProgram(program, vShader, fShader);\r\n  }\r\n\r\n  public setTransformation(transformationType: Transformation, newArr: Point) {\r\n    switch (transformationType) {\r\n      case \"rotate\":\r\n        this.rotate = newArr;\r\n        break;\r\n      case \"scale\":\r\n        this.scale = newArr;\r\n        break;\r\n      case \"translate\":\r\n        this.translate = newArr;\r\n        break;\r\n      default:\r\n        throw `shape.setTransformation: invalid transformation type '${transformationType}'`;\r\n    }\r\n    this.calculateTransformMatrix();\r\n  }\r\n\r\n  public getTransformation(transformationType: Transformation) {\r\n    switch (transformationType) {\r\n      case \"rotate\":\r\n        return this.rotate;\r\n      case \"scale\":\r\n        return this.scale;\r\n      case \"translate\":\r\n        return this.translate;\r\n      default:\r\n        throw `shape.getTransformation: invalid transformation type '${transformationType}'`;\r\n    }\r\n  }\r\n\r\n  protected calculateWorldMatrix() {\r\n    const worldMatrixPos = this.gl.getUniformLocation(this.program, \"mWorld\");\r\n    const worldMatrix = new Float32Array(mat4.identity());\r\n    this.gl.uniformMatrix4fv(worldMatrixPos, false, worldMatrix);\r\n  }\r\n\r\n  protected calculateTransformMatrix() {\r\n    this.transformMatrix = mat4.mMult(\r\n      mat4.xRotation(this.rotate[0]),\r\n      mat4.yRotation(this.rotate[1]),\r\n      mat4.zRotation(this.rotate[2]),\r\n      mat4.scale(...this.scale),\r\n      mat4.translation(...this.translate),\r\n    );\r\n    const gl = this.gl;\r\n\r\n    const transformMatrixPos = gl.getUniformLocation(this.program, \"mTransform\");\r\n\r\n    const transformMatrix = new Float32Array(this.transformMatrix);\r\n\r\n    this.gl.uniformMatrix4fv(transformMatrixPos, false, transformMatrix);\r\n  }\r\n\r\n  public setProjection(projectionType: Projection) {\r\n    switch (projectionType) {\r\n      case \"orthographic\":\r\n        this.projMatrix = mat4.orthographicProj();\r\n        break;\r\n      case \"oblique\":\r\n        this.projMatrix = mat4.obliqueProj();\r\n        break;\r\n      case \"perspective\":\r\n        this.projMatrix = mat4.perspectiveProj();\r\n        break;\r\n      default:\r\n        throw `shape.setProjection: invalid projection type '${projectionType}'`;\r\n    }\r\n    this.calculateProjectionMatrix();\r\n  }\r\n\r\n  protected calculateProjectionMatrix() {\r\n    const projMatrixPos = this.gl.getUniformLocation(this.program, \"mProj\");\r\n    const projMatrix = new Float32Array(this.projMatrix);\r\n    this.gl.uniformMatrix4fv(projMatrixPos, false, projMatrix);\r\n  }\r\n\r\n  public setCamera(cameraSettingType: CameraSetting, newValue: number) {\r\n    // Notes: newValue can be radius, theta (in degree), and phi (in degree)\r\n\r\n    switch (cameraSettingType) {\r\n      case \"radius\":\r\n        this.cameraPosition[0] = newValue;\r\n        break;\r\n      case \"theta\":\r\n        this.cameraPosition[1] = newValue;\r\n        break;\r\n      case \"phi\":\r\n        this.cameraPosition[2] = newValue;\r\n        break;\r\n      default:\r\n        throw `shape.setCamera: invalid camera setting type '${cameraSettingType}'`;\r\n    }\r\n    this.calculateViewMatrix();\r\n  }\r\n\r\n  protected calculateViewMatrix() {\r\n    this.viewMatrix = mat4.lookAt(toCartesian(this.cameraPosition) as Point);\r\n    const viewMatrixPos = this.gl.getUniformLocation(this.program, \"mView\");\r\n    const viewMatrix = new Float32Array(this.viewMatrix);\r\n    this.gl.uniformMatrix4fv(viewMatrixPos, false, viewMatrix);\r\n  }\r\n\r\n  public render(mode: number, startingIdx: number, size: number) {\r\n    this.gl.drawArrays(mode, startingIdx, size);\r\n  }\r\n\r\n  public setPoints(...points: number[]) {\r\n    this.points = points;\r\n  }\r\n\r\n  public setNormals(...normals: number[]) {\r\n    this.normals = normals;\r\n  }\r\n\r\n  public abstract setupPoints(): void;\r\n\r\n  public abstract draw(): void;\r\n\r\n  mapColor(color: number[]) {\r\n    return color.map((elmt) => (elmt % 256) / 255);\r\n  }\r\n\r\n  changePosition(vertexData: number[]) {\r\n    const { gl, program } = this;\r\n    const buffer = gl.createBuffer();\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexData), gl.STATIC_DRAW);\r\n\r\n    const positionPos = gl.getAttribLocation(program, \"position\");\r\n    gl.enableVertexAttribArray(positionPos);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(positionPos, this.dimention, gl.FLOAT, false, 0, 0);\r\n\r\n    return buffer;\r\n  }\r\n\r\n  changeNormal(normalData: number[]) {\r\n    const { gl, program } = this;\r\n    const buffer = gl.createBuffer();\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\r\n\r\n    const normalPos = gl.getAttribLocation(program, \"vertNormal\");\r\n    gl.enableVertexAttribArray(normalPos);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(normalPos, this.dimention, gl.FLOAT, false, 0, 0);\r\n\r\n    return buffer;\r\n  }\r\n\r\n  setPhongProperties() {\r\n    const { gl, program } = this;\r\n\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Id\"), new Float32Array(this.Id));\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Is\"), new Float32Array(this.Is));\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ia\"), new Float32Array(this.Ia));\r\n\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Kd\"), new Float32Array(this.Kd));\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ks\"), new Float32Array(this.Ks));\r\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ka\"), new Float32Array(this.Ka));\r\n\r\n    gl.uniform3fv(\r\n      gl.getUniformLocation(program, \"lightPosition\"),\r\n      new Float32Array(this.lightPosition),\r\n    );\r\n\r\n    gl.uniform1f(gl.getUniformLocation(program, \"shininess\"), this.shininess);\r\n  }\r\n\r\n  setUseShading(useShading: boolean) {\r\n    const { gl, program } = this;\r\n\r\n    this.useShading = useShading ? 1 : 0;\r\n    gl.uniform1i(gl.getUniformLocation(program, \"useShading\"), this.useShading);\r\n  }\r\n\r\n  createCompiledShader(type: number, sourceCode: string) {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(type);\r\n    if (!shader) {\r\n      const shaderTypeString = type == gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\r\n      throw `shape.createCompiledShader: error while creating ${shaderTypeString} shader`;\r\n    }\r\n    gl.shaderSource(shader, sourceCode);\r\n    gl.compileShader(shader);\r\n    return shader;\r\n  }\r\n\r\n  setupProgram(program: WebGLProgram, vShader: WebGLShader, fShader: WebGLShader) {\r\n    this.gl.attachShader(program, vShader);\r\n    this.gl.attachShader(program, fShader);\r\n    this.gl.linkProgram(program);\r\n    this.gl.useProgram(program);\r\n  }\r\n\r\n  createProgram() {\r\n    const program = this.gl.createProgram();\r\n    if (!program) {\r\n      throw \"shape.createProgram: no program!\";\r\n    }\r\n    return program;\r\n  }\r\n}\r\n\r\nexport default Shape;\r\n","import { vec } from \"../../util/vector\";\r\n\r\n// sisi depan yg ngehadep kita (depan belakang) front, sisi kiri kanan: side, sisi bawah atas: flat\r\ntype orientation = \"front\" | \"side\" | \"ground\";\r\nconst x = 0;\r\nconst y = 1;\r\nconst z = 2;\r\n\r\n/*\r\n * @param p1 the first point\r\n * @param p2 the second point\r\n * @param p3 the third point\r\n * @param p4 the fourth point\r\n */\r\nconst buildQuad = (\r\n  p1: Point,\r\n  p2: Point,\r\n  p3: Point,\r\n  p4: Point,\r\n  normalArray: number[],\r\n  reversed: boolean = false,\r\n) => {\r\n  const temp1 = vec.sub(p2, p1);\r\n  const temp2 = vec.sub(p4, p1);\r\n  const normalDir = reversed ? -1 : 1;\r\n  const normal = vec.mul(normalDir, vec.cross(temp1, temp2));\r\n\r\n  normalArray.push(...normal, ...normal, ...normal, ...normal);\r\n\r\n  if (reversed) {\r\n    return [...p4, ...p3, ...p2, ...p1];\r\n  } else {\r\n    return [...p1, ...p2, ...p3, ...p4];\r\n  }\r\n};\r\n\r\n// create a square based on 4 base point and its width, then its orientation\r\nfunction createSquare2D(\r\n  p0: Point,\r\n  p1: Point,\r\n  p2: Point,\r\n  p3: Point,\r\n  w: number, //width\r\n  orientation: orientation,\r\n  normalArr: number[] = [],\r\n  reversedNormal: boolean = true\r\n): number[] {\r\n  // prettier-ignore\r\n  if (orientation == \"front\") {\r\n    return [\r\n      // first block ( top-left to top-right )\r\n      ...buildQuad(\r\n        [p0[x] - w, p0[y] - w, p0[z]],\r\n        [p0[x] - w, p0[y] + w, p0[z]],\r\n        [p1[x] + w, p1[y] + w, p1[z]],\r\n        [p1[x] + w, p1[y] - w, p1[z]],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // second block  ( top-right to bottom-right )\r\n      ...buildQuad(\r\n        [p1[x] - w, p1[y] + w, p1[z]],\r\n        [p1[x] + w, p1[y] + w, p1[z]],\r\n        [p2[x] + w, p2[y] - w, p2[z]],\r\n        [p2[x] - w, p2[y] - w, p2[z]],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // third block ( bottom-left to bottom-right )\r\n      ...buildQuad(\r\n        [p3[x] - w, p3[y] - w, p3[z]],\r\n        [p3[x] - w, p3[y] + w, p3[z]],\r\n        [p2[x] + w, p2[y] + w, p2[z]],\r\n        [p2[x] + w, p2[y] - w, p2[z]],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // fourth block  ( top-left to bottom-left )\r\n      ...buildQuad(\r\n        [p0[x] - w, p0[y] + w, p0[z]],\r\n        [p0[x] + w, p0[y] + w, p0[z]],\r\n        [p3[x] + w, p3[y] - w, p3[z]],\r\n        [p3[x] - w, p3[y] - w, p3[z]],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n    ]\r\n  }\r\n  if (orientation == \"ground\") {\r\n    //prettier-ignore\r\n    return [\r\n      // first block ( top-left to top-right )\r\n      ...buildQuad(\r\n        [p0[x] - w, p0[y], p0[z] - w],\r\n        [p0[x] - w, p0[y], p0[z] + w],\r\n        [p1[x] + w, p1[y], p1[z] + w],\r\n        [p1[x] + w, p1[y], p1[z] - w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // second block  ( top-right to bottom-right )\r\n      ...buildQuad(\r\n        [p1[x] - w, p1[y], p1[z] + w],\r\n        [p1[x] + w, p1[y], p1[z] + w],\r\n        [p2[x] + w, p2[y], p2[z] - w],\r\n        [p2[x] - w, p2[y], p2[z] - w],\r\n        normalArr,\r\n        !reversedNormal\r\n      ),\r\n      // third block ( bottom-left to bottom-right )\r\n      ...buildQuad(\r\n        [p3[x] - w, p3[y], p3[z] - w],\r\n        [p3[x] - w, p3[y], p3[z] + w],\r\n        [p2[x] + w, p2[y], p2[z] + w],\r\n        [p2[x] + w, p2[y], p2[z] - w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // fourth block  ( top-left to bottom-left )\r\n      ...buildQuad(\r\n        [p0[x] - w, p0[y], p0[z] + w],\r\n        [p0[x] + w, p0[y], p0[z] + w],\r\n        [p3[x] + w, p3[y], p3[z] - w],\r\n        [p3[x] - w, p3[y], p3[z] - w],\r\n        normalArr,\r\n        !reversedNormal\r\n      ),\r\n    ]\r\n  } else {\r\n    // sides\r\n    // prettier-ignore\r\n    return [\r\n      // first block ( top-left to top-right )\r\n      ...buildQuad(\r\n        [p0[x], p0[y] - w, p0[z] + w],\r\n        [p0[x], p0[y] + w, p0[z] + w],\r\n        [p1[x], p1[y] + w, p1[z] - w],\r\n        [p1[x], p1[y] - w, p1[z] - w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // second block  ( top-right to bottom-right )\r\n      ...buildQuad(\r\n        [p1[x], p1[y] + w, p1[z] + w],\r\n        [p1[x], p1[y] + w, p1[z] - w],\r\n        [p2[x], p2[y] - w, p2[z] - w],\r\n        [p2[x], p2[y] - w, p2[z] + w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // third block ( bottom-left to bottom-right )\r\n      ...buildQuad(\r\n\r\n        [p3[x], p3[y] - w, p3[z] + w],\r\n        [p3[x], p3[y] + w, p3[z] + w],\r\n        [p2[x], p2[y] + w, p2[z] - w],\r\n        [p2[x], p2[y] - w, p2[z] - w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n      // fourth block  ( top-left to bottom-left )\r\n      ...buildQuad(\r\n\r\n        [p0[x], p0[y] + w, p0[z] + w],\r\n        [p0[x], p0[y] + w, p0[z] - w],\r\n        [p3[x], p3[y] - w, p3[z] - w],\r\n        [p3[x], p3[y] - w, p3[z] + w],\r\n        normalArr,\r\n        reversedNormal\r\n      ),\r\n    ]\r\n  }\r\n}\r\n\r\nexport { buildQuad, createSquare2D };\r\n","import { buildQuad } from \"./util\";\r\n\r\n/*\r\n * Triangular Prism\r\n */\r\n\r\n// Type declaration\r\ntype TrianglePoints = { v1: Point; v2: Point; v3: Point };\r\ninterface ITrianglePoints {\r\n  inner: TrianglePoints[];\r\n  outer: TrianglePoints[];\r\n}\r\n\r\n/*\r\n * @param radius distance from (x,z)=(0,0) to vertices\r\n * @param y vertical position\r\n * @param x x coord of the central of the triangle\r\n * @param z z coord of the central of the triangle\r\n */\r\nconst generateTrianglePoints = (\r\n  radius: number,\r\n  y: number,\r\n  x: number = 0,\r\n  z: number = 0,\r\n): TrianglePoints => {\r\n  const radiusSin30 = radius * 0.5;\r\n  const radiusCos30 = radius * 0.5 * Math.sqrt(3);\r\n\r\n  return {\r\n    // near\r\n    v1: [x, y, z + radius],\r\n    // far left\r\n    v2: [x - radiusCos30, y, z - radiusSin30],\r\n    // far right\r\n    v3: [x + radiusCos30, y, z - radiusSin30],\r\n  };\r\n};\r\n\r\n/*\r\n * @param innerTriangle the inner hollow triangle boundary\r\n * @param outerTriangle the outer hollow triangle boundary\r\n * @param reversed is quad reversed\r\n */\r\nconst buildHollowTriangle = (\r\n  innerTriangle: TrianglePoints,\r\n  outerTriangle: TrianglePoints,\r\n  normalArray: number[],\r\n  reversed: boolean = false,\r\n) => {\r\n  return [\r\n    ...buildQuad(\r\n      outerTriangle.v1,\r\n      innerTriangle.v1,\r\n      innerTriangle.v2,\r\n      outerTriangle.v2,\r\n      normalArray,\r\n      reversed,\r\n    ),\r\n    ...buildQuad(\r\n      outerTriangle.v2,\r\n      innerTriangle.v2,\r\n      innerTriangle.v3,\r\n      outerTriangle.v3,\r\n      normalArray,\r\n      reversed,\r\n    ),\r\n    ...buildQuad(\r\n      outerTriangle.v3,\r\n      innerTriangle.v3,\r\n      innerTriangle.v1,\r\n      outerTriangle.v1,\r\n      normalArray,\r\n      reversed,\r\n    ),\r\n  ];\r\n};\r\n\r\n/*\r\n * @param t1 the first triangle to be connected\r\n * @param t2 the second triangle to be connected\r\n */\r\nconst buildTriangleConnector = (\r\n  t1: TrianglePoints,\r\n  t2: TrianglePoints,\r\n  normalArray: number[],\r\n  reversed: boolean = false,\r\n) => {\r\n  return [\r\n    ...buildQuad(t1.v1, t2.v1, t2.v3, t1.v3, normalArray, reversed),\r\n    ...buildQuad(t1.v3, t2.v3, t2.v2, t1.v2, normalArray, reversed),\r\n    ...buildQuad(t1.v2, t2.v2, t2.v1, t1.v1, normalArray, reversed),\r\n  ];\r\n};\r\n\r\nconst buildTriangularPrismDatas = () => {\r\n  // 8 triangle points to be used as reference\r\n  const trianglesPoints: ITrianglePoints = {\r\n    inner: [\r\n      generateTrianglePoints(0.4, 0.6),\r\n      generateTrianglePoints(0.4, 0.5),\r\n      generateTrianglePoints(0.4, -0.5),\r\n      generateTrianglePoints(0.4, -0.6),\r\n    ],\r\n    outer: [\r\n      generateTrianglePoints(0.6, 0.6),\r\n      generateTrianglePoints(0.6, 0.5),\r\n      generateTrianglePoints(0.6, -0.5),\r\n      generateTrianglePoints(0.6, -0.6),\r\n    ],\r\n  };\r\n\r\n  // Vertical structure triangle radius\r\n  // 0.2 = r + r*sin30\r\n  // r = 0.2 / (1 + sin30) = 0.2 / 1.5\r\n  const vsTriangleRadius = 0.2 / 1.5;\r\n\r\n  // Vertical structure triangle center for near, far left, and far right\r\n  const vsTriangleRadiusSin30 = vsTriangleRadius * 0.5;\r\n  const vsTriangleRadiusCos30 = vsTriangleRadius * 0.5 * Math.sqrt(3);\r\n  const vsTriangleCenter = [\r\n    { x: 0, z: 0.6 - vsTriangleRadius }, // near\r\n    {\r\n      x: trianglesPoints.outer[0].v2[0] + vsTriangleRadiusCos30,\r\n      z: trianglesPoints.outer[0].v2[2] + vsTriangleRadiusSin30,\r\n    }, // far left\r\n    {\r\n      x: trianglesPoints.outer[0].v3[0] - vsTriangleRadiusCos30,\r\n      z: trianglesPoints.outer[0].v3[2] + vsTriangleRadiusSin30,\r\n    }, // far right\r\n  ];\r\n\r\n  // Normals\r\n  let triangularPrismNormals: number[] = [];\r\n\r\n  // Points\r\n  // prettier-ignore\r\n  const triangularPrismPoints = [\r\n    // Top triangle structure\r\n    ...buildHollowTriangle(trianglesPoints.inner[0], trianglesPoints.outer[0], triangularPrismNormals),\r\n    ...buildHollowTriangle(trianglesPoints.inner[1], trianglesPoints.outer[1], triangularPrismNormals, true),\r\n    ...buildTriangleConnector(trianglesPoints.inner[0], trianglesPoints.inner[1], triangularPrismNormals, true),\r\n    ...buildTriangleConnector(trianglesPoints.outer[0], trianglesPoints.outer[1], triangularPrismNormals),\r\n    // Bottom triangle structure\r\n    ...buildHollowTriangle(trianglesPoints.inner[2], trianglesPoints.outer[2], triangularPrismNormals),\r\n    ...buildHollowTriangle(trianglesPoints.inner[3], trianglesPoints.outer[3], triangularPrismNormals, true),\r\n    ...buildTriangleConnector(trianglesPoints.inner[2], trianglesPoints.inner[3], triangularPrismNormals, true),\r\n    ...buildTriangleConnector(trianglesPoints.outer[2], trianglesPoints.outer[3], triangularPrismNormals),\r\n    // Vertical structure\r\n    ...buildTriangleConnector(\r\n      generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[0].x, vsTriangleCenter[0].z),\r\n      generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[0].x, vsTriangleCenter[0].z),\r\n      triangularPrismNormals\r\n    ),\r\n    ...buildTriangleConnector(\r\n      generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[1].x, vsTriangleCenter[1].z),\r\n      generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[1].x, vsTriangleCenter[1].z),\r\n      triangularPrismNormals\r\n    ),\r\n    ...buildTriangleConnector(\r\n      generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[2].x, vsTriangleCenter[2].z),\r\n      generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[2].x, vsTriangleCenter[2].z),\r\n      triangularPrismNormals\r\n    ),\r\n  ];\r\n\r\n  // Return\r\n  return {\r\n    points: triangularPrismPoints,\r\n    normals: triangularPrismNormals,\r\n  };\r\n}\r\n\r\nexport default buildTriangularPrismDatas;\r\n","import { createSquare2D } from \"./util\";\r\n\r\nconst buildCubeDatas = (halfSize: number, halfThicc: number, thickness: number) => {\r\n  // half size min half thickness\r\n  const sizemt = halfSize - halfThicc;\r\n  const normalArr: number[] = [];\r\n\r\n  const points = [\r\n    // front\r\n    ...createSquare2D(\r\n      [-sizemt, sizemt, halfSize],\r\n      [sizemt, sizemt, halfSize],\r\n      [sizemt, -sizemt, halfSize],\r\n      [-sizemt, -sizemt, halfSize],\r\n      halfThicc,\r\n      \"front\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    ...createSquare2D(\r\n      [-sizemt, sizemt, halfSize - thickness],\r\n      [sizemt, sizemt, halfSize - thickness],\r\n      [sizemt, -sizemt, halfSize - thickness],\r\n      [-sizemt, -sizemt, halfSize - thickness],\r\n      halfThicc,\r\n      \"front\",\r\n      normalArr,\r\n      false\r\n    ),\r\n    // back\r\n    ...createSquare2D(\r\n      [-sizemt, sizemt, -halfSize],\r\n      [sizemt, sizemt, -halfSize],\r\n      [sizemt, -sizemt, -halfSize],\r\n      [-sizemt, -sizemt, -halfSize],\r\n      halfThicc,\r\n      \"front\",\r\n      normalArr,\r\n      false\r\n    ),\r\n    ...createSquare2D(\r\n      [-sizemt, sizemt, -halfSize + thickness],\r\n      [sizemt, sizemt, -halfSize + thickness],\r\n      [sizemt, -sizemt, -halfSize + thickness],\r\n      [-sizemt, -sizemt, -halfSize + thickness],\r\n      halfThicc,\r\n      \"front\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    // left\r\n    ...createSquare2D(\r\n      [-halfSize, sizemt, sizemt],\r\n      [-halfSize, sizemt, -sizemt],\r\n      [-halfSize, -sizemt, -sizemt],\r\n      [-halfSize, -sizemt, sizemt],\r\n      halfThicc,\r\n      \"side\",\r\n      normalArr,\r\n      false\r\n    ),\r\n    ...createSquare2D(\r\n      [-halfSize + thickness, sizemt, sizemt],\r\n      [-halfSize + thickness, sizemt, -sizemt],\r\n      [-halfSize + thickness, -sizemt, -sizemt],\r\n      [-halfSize + thickness, -sizemt, sizemt],\r\n      halfThicc,\r\n      \"side\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    // right\r\n    ...createSquare2D(\r\n      [halfSize, sizemt, sizemt],\r\n      [halfSize, sizemt, -sizemt],\r\n      [halfSize, -sizemt, -sizemt],\r\n      [halfSize, -sizemt, sizemt],\r\n      halfThicc,\r\n      \"side\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    ...createSquare2D(\r\n      [halfSize - thickness, sizemt, sizemt],\r\n      [halfSize - thickness, sizemt, -sizemt],\r\n      [halfSize - thickness, -sizemt, -sizemt],\r\n      [halfSize - thickness, -sizemt, sizemt],\r\n      halfThicc,\r\n      \"side\",\r\n      normalArr,\r\n      false\r\n    ),\r\n    // top\r\n    ...createSquare2D(\r\n      [-sizemt, halfSize, -sizemt],\r\n      [sizemt, halfSize, -sizemt],\r\n      [sizemt, halfSize, sizemt],\r\n      [-sizemt, halfSize, sizemt],\r\n      halfThicc,\r\n      \"ground\",\r\n      normalArr,\r\n      false\r\n    ),\r\n    ...createSquare2D(\r\n      [-sizemt, halfSize - thickness, -sizemt],\r\n      [sizemt, halfSize - thickness, -sizemt],\r\n      [sizemt, halfSize - thickness, sizemt],\r\n      [-sizemt, halfSize - thickness, sizemt],\r\n      halfThicc,\r\n      \"ground\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    //bottom\r\n    ...createSquare2D(\r\n      [-sizemt, -halfSize, -sizemt],\r\n      [sizemt, -halfSize, -sizemt],\r\n      [sizemt, -halfSize, sizemt],\r\n      [-sizemt, -halfSize, sizemt],\r\n      halfThicc,\r\n      \"ground\",\r\n      normalArr,\r\n      true\r\n    ),\r\n    ...createSquare2D(\r\n      [-sizemt, -halfSize + thickness, -sizemt],\r\n      [sizemt, -halfSize + thickness, -sizemt],\r\n      [sizemt, -halfSize + thickness, sizemt],\r\n      [-sizemt, -halfSize + thickness, sizemt],\r\n      halfThicc,\r\n      \"ground\",\r\n      normalArr,\r\n      false\r\n    ),\r\n  ];\r\n  // prettier-ignore\r\n  return {\r\n    points: points,\r\n    normalVector: normalArr\r\n  };\r\n}\r\n\r\nexport default buildCubeDatas;\r\n","import { createSquare2D } from \"./util\";\r\n\r\nconst buildBlockDatas = (halflen: number, halfhei: number, halfwid: number, halfthicc: number, thickness: number) => {\r\n  // half size min half thickness\r\n  const lenmt = halflen - halfthicc;\r\n  const heimt = halfhei - halfthicc;\r\n  const widmt = halfwid - halfthicc;\r\n  const normalArr: number[] = []\r\n  //prettier-ignore\r\n  const points = [\r\n    // front \r\n    ...createSquare2D([-lenmt, heimt, halfwid], [lenmt, heimt, halfwid], [lenmt, -heimt, halfwid], [-lenmt, -heimt, halfwid], halfthicc, \"front\", normalArr),\r\n    ...createSquare2D([-lenmt, heimt, halfwid - thickness], [lenmt, heimt, halfwid - thickness], [lenmt, -heimt, halfwid - thickness], [-lenmt, -heimt, halfwid - thickness], halfthicc, \"front\", normalArr, false),\r\n    // back\r\n    ...createSquare2D([-lenmt, heimt, -halfwid], [lenmt, heimt, -halfwid], [lenmt, -heimt, -halfwid], [-lenmt, -heimt, -halfwid], halfthicc, \"front\", normalArr, false),\r\n    ...createSquare2D([-lenmt, heimt, -halfwid + thickness], [lenmt, heimt, -halfwid + thickness], [lenmt, -heimt, -halfwid + thickness], [-lenmt, -heimt, -halfwid + thickness], halfthicc, \"front\", normalArr, true),\r\n\r\n    // left\r\n    ...createSquare2D([-halflen, heimt, widmt], [-halflen, heimt, -widmt], [-halflen, -heimt, -widmt], [-halflen, -heimt, widmt], halfthicc, \"side\", normalArr, false),\r\n    ...createSquare2D([-halflen + thickness, heimt, widmt], [-halflen + thickness, heimt, -widmt], [-halflen + thickness, -heimt, -widmt], [-halflen + thickness, -heimt, widmt], halfthicc, \"side\", normalArr, true),\r\n    // right\r\n    ...createSquare2D([halflen, heimt, widmt], [halflen, heimt, -widmt], [halflen, -heimt, -widmt], [halflen, -heimt, widmt], halfthicc, \"side\", normalArr),\r\n    ...createSquare2D([halflen - thickness, heimt, widmt], [halflen - thickness, heimt, -widmt], [halflen - thickness, -heimt, -widmt], [halflen - thickness, -heimt, widmt], halfthicc, \"side\", normalArr, false),\r\n    // top\r\n    ...createSquare2D([-lenmt, halfhei - thickness, -widmt], [lenmt, halfhei - thickness, -widmt], [lenmt, halfhei - thickness, widmt], [-lenmt, halfhei - thickness, widmt], halfthicc, \"ground\", normalArr, true),\r\n    ...createSquare2D([-lenmt, halfhei, -widmt], [lenmt, halfhei, -widmt], [lenmt, halfhei, widmt], [-lenmt, halfhei, widmt], halfthicc, \"ground\", normalArr, false),\r\n    // bottom\r\n    ...createSquare2D([-lenmt, -halfhei + thickness, -widmt], [lenmt, -halfhei + thickness, -widmt], [lenmt, -halfhei + thickness, widmt], [-lenmt, -halfhei + thickness, widmt], halfthicc, \"ground\", normalArr, false),\r\n    ...createSquare2D([-lenmt, -halfhei, -widmt], [lenmt, -halfhei, -widmt], [lenmt, -halfhei, widmt], [-lenmt, -halfhei, widmt], halfthicc, \"ground\", normalArr, true),\r\n  ]\r\n  // prettier-ignore\r\n  return {\r\n    points: points,\r\n    normalVector: normalArr\r\n  };\r\n}\r\n\r\nexport default buildBlockDatas;\r\n","import buildTriangularPrismDatas from \"./prismPoints\";\r\nimport buildCubeDatas from \"./cubePoints\";\r\nimport buildBlockDatas from \"./blockPoints\";\r\n// prettier-ignore\r\nexport {\r\n  buildTriangularPrismDatas,\r\n  buildCubeDatas,\r\n  buildBlockDatas\r\n}\r\n","import Shape from \"./shape\";\r\nimport { buildCubeDatas } from \"./initialPoints\";\r\n\r\nclass Cube extends Shape {\r\n  constructor(canvas: HTMLCanvasElement, private size: number, private thickness: number) {\r\n    super(canvas);\r\n    this.setupPoints();\r\n  }\r\n\r\n  public setSize(size: number) {\r\n    this.size = size;\r\n    this.setupPoints();\r\n  }\r\n\r\n  setupPoints() {\r\n    const halfSize = this.size / 2;\r\n    const halfThicc = this.thickness / 2;\r\n\r\n    const cubeDatas = buildCubeDatas(halfSize, halfThicc, this.thickness);\r\n    this.changeNormal(cubeDatas.normalVector);\r\n    this.points = cubeDatas.points;\r\n  }\r\n\r\n  public draw() {\r\n    const vertexData = this.points;\r\n\r\n    this.changePosition(vertexData);\r\n\r\n    // loop to draw cube side(rusuk), each as a rectangle.\r\n    // To draw a rectangle needs 4 points, and each cube' face(sisi) has 4 side,\r\n    // In total 6 faces x 4 sides = 24.\r\n    for (var i = 0; i < this.points.length / this.dimention; i++) {\r\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cube;\r\n","import Shape from \"./shape\";\r\nimport { buildBlockDatas } from \"./initialPoints\";\r\n\r\nclass Block extends Shape {\r\n  constructor(\r\n    canvas: HTMLCanvasElement,\r\n    private length: number,\r\n    private height: number,\r\n    private width: number,\r\n    private thickness: number,\r\n  ) {\r\n    super(canvas);\r\n    this.setupPoints();\r\n  }\r\n\r\n  public setLength(length: number) {\r\n    this.length = length;\r\n    this.setupPoints();\r\n  }\r\n\r\n  public setWidth(width: number) {\r\n    this.width = width;\r\n    this.setupPoints();\r\n  }\r\n\r\n  public setHeight(height: number) {\r\n    this.height = height;\r\n    this.setupPoints();\r\n  }\r\n\r\n  setupPoints() {\r\n    const { width, height, length, thickness } = this;\r\n    // length min thickness, len plus thickness, and so on...\r\n    const halflen = length / 2;\r\n    const halfhei = height / 2;\r\n    const halfwid = width / 2;\r\n    const halfthicc = thickness / 2;\r\n\r\n    const blockDatas = buildBlockDatas(halflen, halfhei, halfwid, halfthicc, thickness);\r\n    this.points = blockDatas.points;\r\n    this.setNormals(...blockDatas.normalVector)\r\n    this.changeNormal(blockDatas.normalVector);\r\n  }\r\n\r\n  public draw() {\r\n    this.changePosition(this.points);\r\n\r\n    for (var i = 0; i < this.points.length / this.dimention; i++) {\r\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Block;\r\n","import Shape from \"./shape\";\r\nimport {buildTriangularPrismDatas} from \"./initialPoints\";\r\n\r\nclass TriangularPrism extends Shape {\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    super(canvas);\r\n    this.setupPoints();\r\n  }\r\n\r\n  setupPoints() {\r\n    const triangularPrismDatas = buildTriangularPrismDatas();\r\n    this.points = triangularPrismDatas.points;\r\n    this.normals = triangularPrismDatas.normals;\r\n  }\r\n\r\n  // override\r\n  public draw() {\r\n    const vertexData = this.points;\r\n    const normalData = this.normals;\r\n\r\n    this.changePosition(vertexData);\r\n    this.changeNormal(normalData);\r\n\r\n    // render each rectangle separately\r\n    for (let i = 0; i < this.points.length / (this.dimention * 4); i++) {\r\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\r\n    }\r\n  }\r\n}\r\n\r\nexport default TriangularPrism;\r\n","import App from \"./app\";\r\nimport Cube from \"./shapes/cube\";\r\nimport Block from \"./shapes/block\";\r\nimport TriangularPrism from \"./shapes/triangularPrism\";\r\nimport Shape from \"./shapes/shape\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\r\n// function for debugging block / cube as well\r\nfunction initShape(shapeName: ShapeType): Shape {\r\n  let obj: Shape;\r\n  switch (shapeName) {\r\n    case \"block\":\r\n      obj = new Block(canvas, 0.8, 0.4, 0.4, 0.1);\r\n      break;\r\n    case \"cube\":\r\n      obj = new Cube(canvas, 0.6, 0.1);\r\n      break;\r\n    case \"prism\":\r\n      obj = new TriangularPrism(canvas);\r\n      break;\r\n  }\r\n  const shadingElmt = document.getElementById(\"shading\") as HTMLInputElement;\r\n  obj.setUseShading(shadingElmt.checked);\r\n  return obj;\r\n}\r\n\r\n// Init default shapes\r\n// change this to prism later\r\nconst defaultObj = initShape(\"prism\");\r\n\r\n// Init app\r\nconst app = new App();\r\napp.setShape(defaultObj);\r\n\r\n// Pick hollow object buttons event handler\r\nconst prismBtn = document.getElementById(\"prism\") as HTMLElement;\r\nprismBtn.addEventListener(\"click\", () => {\r\n  app.resetAll();\r\n  app.setShape(initShape(\"prism\"));\r\n});\r\n\r\nconst cubeBtn = document.getElementById(\"cube\") as HTMLElement;\r\ncubeBtn.addEventListener(\"click\", () => {\r\n  app.resetAll();\r\n  app.setShape(initShape(\"cube\"));\r\n});\r\n\r\nconst blockBtn = document.getElementById(\"block\") as HTMLElement;\r\nblockBtn.addEventListener(\"click\", () => {\r\n  app.resetAll();\r\n  app.setShape(initShape(\"block\"));\r\n});\r\n\r\n// Perspective buttons event handler\r\nconst orthographicBtn = document.getElementById(\"orthographic\") as HTMLElement;\r\northographicBtn.addEventListener(\"click\", () => {\r\n  app.setShapeProjection(\"orthographic\");\r\n});\r\n\r\nconst obliqueBtn = document.getElementById(\"oblique\") as HTMLElement;\r\nobliqueBtn.addEventListener(\"click\", () => {\r\n  app.setShapeProjection(\"oblique\");\r\n});\r\n\r\nconst perspectiveBtn = document.getElementById(\"perspective\") as HTMLElement;\r\nperspectiveBtn.addEventListener(\"click\", () => {\r\n  app.setShapeProjection(\"perspective\");\r\n});\r\n\r\n// Reset button event handler\r\nconst resetBtn = document.getElementById(\"reset\") as HTMLElement;\r\nresetBtn.addEventListener(\"click\", () => {\r\n  app.resetShape();\r\n});\r\n\r\nconst camResetBtn = document.getElementById(\"cam-reset\") as HTMLElement;\r\ncamResetBtn.addEventListener(\"click\", () => {\r\n  app.resetCamera();\r\n});\r\n\r\nconst shadingToggle = document.getElementById(\"shading\") as HTMLInputElement;\r\nshadingToggle.addEventListener(\"change\", () => {\r\n  app.toggleShading(shadingToggle.checked);\r\n});\r\n// Start app\r\napp.start();\r\n"]}