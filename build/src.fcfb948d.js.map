{"version":3,"sources":["src/SliderManager.ts","src/app.ts","src/shapes/initialPoints/util.ts","src/util/convert.ts","src/util/vector.ts","src/util/matrix.ts","src/shapes/shape.ts","src/shapes/cube.ts","src/shapes/block.ts","src/shapes/initialPoints/prismPoints.ts","src/shapes/initialPoints/index.ts","src/shapes/triangularPrism.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.fcfb948d.js","sourceRoot":"..","sourcesContent":["type SliderId =\n  | \"x\"\n  | \"y\"\n  | \"z\"\n  | \"rotate-x\"\n  | \"rotate-y\"\n  | \"rotate-z\"\n  | \"zoom\"\n  | \"cam-radius\"\n  | \"cam-theta\"\n  | \"cam-phi\";\nconst sliderIds: SliderId[] = [\n  \"x\",\n  \"y\",\n  \"z\",\n  \"rotate-x\",\n  \"rotate-y\",\n  \"rotate-z\",\n  \"zoom\",\n  \"cam-radius\",\n  \"cam-theta\",\n  \"cam-phi\",\n];\n\ntype Sliders = {\n  [sliderId: string]: HTMLInputElement;\n};\nconst sliders: Sliders = {};\ntype SliderIndicator = {\n  [sliderId: string]: HTMLSpanElement;\n};\nconst sliderIndicators: SliderIndicator = {};\ntype SliderDefaultValue = {\n  [sliderId: string]: number;\n};\nconst tSliderDefaultValues: SliderDefaultValue = {\n  x: 50,\n  y: 50,\n  z: 50,\n  \"rotate-x\": 0,\n  \"rotate-y\": 0,\n  \"rotate-z\": 0,\n  zoom: 1,\n};\nconst cSliderDefaultValues: SliderDefaultValue = {\n  \"cam-radius\": 0,\n  \"cam-theta\": 0,\n  \"cam-phi\": 0,\n};\n\nsliderIds.forEach((sliderId) => {\n  sliders[sliderId] = document.getElementById(sliderId) as HTMLInputElement;\n  sliderIndicators[`${sliderId}-value`] = document.getElementById(\n    `${sliderId}-value`,\n  ) as HTMLSpanElement;\n  sliderIndicators[`${sliderId}-value`].innerText = sliders[sliderId].value;\n});\n\nconst getSlider = (sliderId: SliderId) => sliders[sliderId];\n\nclass SliderManager {\n  static assignInputEvent(sliderId: SliderId, callback: Function) {\n    const elmt = getSlider(sliderId);\n    elmt.oninput = function () {\n      const value = this.value;\n      sliderIndicators[`${elmt.id}-value`].innerText = value;\n      callback(value);\n    };\n  }\n\n  static resetTransformSliderValue() {\n    sliderIds.forEach((sliderId) => {\n      if (tSliderDefaultValues.hasOwnProperty(sliderId)) {\n        sliders[sliderId].value = String(tSliderDefaultValues[sliderId]);\n        sliders[sliderId].dispatchEvent(new Event(\"input\"));\n      }\n    });\n  }\n\n  static resetCameraSliderValue() {\n    sliderIds.forEach((sliderId) => {\n      if (cSliderDefaultValues.hasOwnProperty(sliderId)) {\n        sliders[sliderId].value = String(cSliderDefaultValues[sliderId]);\n        sliders[sliderId].dispatchEvent(new Event(\"input\"));\n      }\n    });\n  }\n}\nexport default SliderManager;\nexport {sliderIds};\n","import Shape from \"./shapes/shape\";\nimport SliderManager from \"./SliderManager\";\n\nconst X = 0;\nconst Y = 1;\nconst Z = 2;\n\nclass App {\n  private shape: Shape | null = null;\n\n  constructor() {}\n\n  initSliders() {\n    if (!this.shape) {\n      return;\n    }\n\n    const changeRotateOf = (index: number, degree: number) => {\n      if (!this.shape) {\n        return;\n      }\n      const newRotation = this.shape.getTransformation(\"rotate\");\n      newRotation[index] = degree;\n      this.shape.setTransformation(\"rotate\", newRotation);\n    };\n    const changeTranslateOf = (index: number, val: number) => {\n      if (!this.shape) {\n        return;\n      }\n      const newVal = this.shape.getTransformation(\"translate\");\n      newVal[index] = (val - 50) / 100;\n      this.shape.setTransformation(\"translate\", newVal);\n    };\n    const changeZoomOf = (val: number) => {\n      if (!this.shape) {\n        return;\n      }\n      this.shape.setTransformation(\"scale\", [val, val, val]);\n    };\n    const changeCameraPositionOf = (cameraSettingType: CameraSetting, newValue: number) => {\n      this.shape?.setCamera(cameraSettingType, newValue);\n    };\n\n    SliderManager.assignInputEvent(\"rotate-x\", (val: number) => {\n      changeRotateOf(X, val);\n    });\n    SliderManager.assignInputEvent(\"rotate-y\", (val: number) => {\n      changeRotateOf(Y, val);\n    });\n    SliderManager.assignInputEvent(\"rotate-z\", (val: number) => {\n      changeRotateOf(Z, val);\n    });\n    SliderManager.assignInputEvent(\"x\", (val: number) => {\n      changeTranslateOf(X, val);\n    });\n    SliderManager.assignInputEvent(\"y\", (val: number) => {\n      changeTranslateOf(Y, val);\n    });\n    SliderManager.assignInputEvent(\"z\", (val: number) => {\n      changeTranslateOf(Z, val);\n    });\n    SliderManager.assignInputEvent(\"zoom\", (val: number) => {\n      changeZoomOf(val);\n    });\n    SliderManager.assignInputEvent(\"cam-radius\", (val: number) => {\n      changeCameraPositionOf(\"radius\", val);\n    });\n    SliderManager.assignInputEvent(\"cam-theta\", (val: number) => {\n      changeCameraPositionOf(\"theta\", val);\n    });\n    SliderManager.assignInputEvent(\"cam-phi\", (val: number) => {\n      changeCameraPositionOf(\"phi\", val);\n    });\n  }\n\n  start() {\n    if (!this.shape) {\n      throw \"No shape defined!\";\n    }\n    this.initSliders();\n    const loop = (time: number) => {\n      this.shape?.draw();\n      window.requestAnimationFrame(loop);\n    };\n    window.requestAnimationFrame(loop);\n  }\n\n  setShape(shape: Shape) {\n    this.shape = shape;\n  }\n\n  resetShape() {\n    SliderManager.resetTransformSliderValue();\n  }\n\n  resetCamera() {\n    SliderManager.resetCameraSliderValue();\n  }\n\n  resetAll() {\n    this.resetShape();\n    this.resetCamera();\n  }\n\n  setShapeProjection(projectionType: Projection) {\n    this.shape?.setProjection(projectionType);\n  }\n}\n\nexport default App;\n","// sisi depan yg ngehadep kita (depan belakang) front, sisi kiri kanan: side, sisi bawah atas: flat\ntype orientation = \"front\" | \"side\" | \"ground\";\nconst x = 0;\nconst y = 1;\nconst z = 2;\n\n// create a square based on 4 base point and its width, then its orientation\nfunction createSquare2D(\n  p0: Point,\n  p1: Point,\n  p2: Point,\n  p3: Point,\n  w: number, //width\n  orientation: orientation,\n): number[] {\n  // prettier-ignore\n  if(orientation == \"front\") {\n    return [\n      // first block ( top-left to top-right )\n      p0[x] - w, p0[y] - w, p0[z],\n      p0[x] - w, p0[y] + w, p0[z],\n      p1[x] + w, p1[y] + w, p1[z],\n      p1[x] + w, p1[y] - w, p1[z],\n      // second block  ( top-right to bottom-right )\n      p1[x] - w, p1[y] + w, p1[z],\n      p1[x] + w, p1[y] + w, p1[z],\n      p2[x] + w, p2[y] - w, p2[z],\n      p2[x] - w, p2[y] - w, p2[z],\n      // third block ( bottom-left to bottom-right )\n      p3[x] - w, p3[y] - w, p3[z],\n      p3[x] - w, p3[y] + w, p3[z],\n      p2[x] + w, p2[y] + w, p2[z],\n      p2[x] + w, p2[y] - w, p2[z],\n      // fourth block  ( top-left to bottom-left )\n      p0[x] - w, p0[y] + w, p0[z],\n      p0[x] + w, p0[y] + w, p0[z],\n      p3[x] + w, p3[y] - w, p3[z],\n      p3[x] - w, p3[y] - w, p3[z],\n    ]\n  }\n  if (orientation == \"ground\") {\n    //prettier-ignore\n    return [\n      // first block ( top-left to top-right )\n      p0[x] - w, p0[y], p0[z]  - w,\n      p0[x] - w, p0[y], p0[z]  + w,\n      p1[x] + w, p1[y], p1[z]  + w,\n      p1[x] + w, p1[y], p1[z]  - w,\n      // second block  ( top-right to bottom-right )\n      p1[x] - w, p1[y], p1[z] + w,\n      p1[x] + w, p1[y], p1[z] + w,\n      p2[x] + w, p2[y], p2[z] - w,\n      p2[x] - w, p2[y], p2[z]- w,\n      // third block ( bottom-left to bottom-right )\n      p3[x] - w, p3[y], p3[z] - w,\n      p3[x] - w, p3[y], p3[z] + w,\n      p2[x] + w, p2[y], p2[z] + w,\n      p2[x] + w, p2[y], p2[z] - w,\n      // fourth block  ( top-left to bottom-left )\n      p0[x] - w, p0[y], p0[z] + w,\n      p0[x] + w, p0[y], p0[z] + w,\n      p3[x] + w, p3[y], p3[z] - w,\n      p3[x] - w, p3[y], p3[z] - w,\n    ]\n  } else {\n    // sides\n    // prettier-ignore\n    return [\n      // first block ( top-left to top-right )\n      p0[x], p0[y] - w, p0[z] + w,\n      p0[x], p0[y] + w, p0[z] + w,\n      p1[x], p1[y] + w, p1[z] - w,\n      p1[x], p1[y] - w, p1[z] - w,\n      // second block  ( top-right to bottom-right )\n      p1[x], p1[y] + w, p1[z] + w,\n      p1[x], p1[y] + w, p1[z] - w,\n      p2[x], p2[y] - w, p2[z] - w,\n      p2[x], p2[y] - w, p2[z] + w,\n      // third block ( bottom-left to bottom-right )\n      p3[x], p3[y] - w, p3[z] + w,\n      p3[x], p3[y] + w, p3[z] + w,\n      p2[x], p2[y] + w, p2[z] - w,\n      p2[x], p2[y] - w, p2[z] - w,\n      // fourth block  ( top-left to bottom-left )\n      p0[x], p0[y] + w, p0[z] + w,\n      p0[x], p0[y] + w, p0[z] - w,\n      p3[x], p3[y] - w, p3[z] - w,\n      p3[x], p3[y] - w, p3[z] + w,\n    ]\n  }\n}\n\nexport {createSquare2D};\n","// Convert degree to radian\nconst toRadian = (degree: number) => (degree * Math.PI) / 180;\n\n// Convert spherical coordinate to cartesian\nconst toCartesian = (sphericalCoord: [number, number, number]) => {\n  // Notes: theta and phi in degree\n\n  // Unpack value\n  const [ radius, theta, phi ] = sphericalCoord;\n  const thetaInRadians = toRadian(theta);\n  const phiInRadians = toRadian(phi);\n\n  // Calculate cartesian coordinate\n  let cartesianCoord = [];\n  cartesianCoord.push(radius * Math.sin(thetaInRadians) * Math.cos(phiInRadians));  // x\n  cartesianCoord.push(radius * Math.sin(thetaInRadians) * Math.sin(phiInRadians));  // y\n  cartesianCoord.push(radius * Math.cos(thetaInRadians));  // z\n\n  // Return\n  return cartesianCoord;\n};\n\nexport {toRadian, toCartesian};\n","class vec {\n  static add = (v1: number[], v2: number[]) => {\n    if (v1.length != v2.length) {\n      throw \"vec.add: vector length must be equal\";\n    }\n\n    let res = [];\n    for (let i = 0; i < v1.length; i++) {\n      res.push(v1[i] + v2[i]);\n    }\n    return res;\n  }\n\n  static sub = (v1: number[], v2: number[]) => {\n    if (v1.length != v2.length) {\n      throw \"vec.sub: vector length must be equal\";\n    }\n\n    let res = [];\n    for (let i = 0; i < v1.length; i++) {\n      res.push(v1[i] - v2[i]);\n    }\n    return res;\n  }\n\n  static mul = (k: number, v: number[]) => {\n    let res = [];\n    for (const el of v) {\n      res.push(k * el);\n    }\n    return res;\n  }\n\n  static dot = (v1: number[], v2: number[]) => {\n    if (v1.length != v2.length) {\n      throw \"vec.dot: vector length must be equal\";\n    }\n\n    let res = 0;\n    for (let i = 0; i < v1.length; i++) {\n      res += v1[i] * v2[i];\n    }\n    return res;\n  }\n\n  static cross = (v1: number[], v2: number[]) => {\n    // Notes: only support vector with length == 3\n\n    if (v1.length != 3 ||  v2.length != 3) {\n      throw \"vec.cross: vector length must equal to 3\";\n    }\n\n    // prettier-ignore\n    return [\n      v1[1] * v2[2] - v1[2] * v2[1],\n      v1[2] * v2[0] - v1[0] * v2[2],\n      v1[0] * v2[1] - v1[1] * v2[0],\n    ];\n  }\n\n  static equal = (v1: number[], v2: number[]) => {\n    if (v1.length != v2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < v1.length; i++) {\n      if (v1[i] != v2[i]) return false;\n    }\n    return true;\n  }\n\n  static len = (v: number[]) => {\n    return Math.sqrt(vec.dot(v, v));\n  }\n\n  static normalize = (v: number[]) => {\n    // Notes: the input array is not preserved, it is assumed that the length of v is not 0\n\n    const vLength = vec.len(v);\n    for (let i = 0; i < v.length; i++) {\n      v[i] /= vLength;\n    }\n    return v;\n  }\n}\n\nexport {vec};\n","import {toRadian} from \"./convert\";\nimport {vec} from \"./vector\";\n\ntype Point = [number, number, number];\ntype Matrix = number[];\n\nclass mat4 {\n  static dimention = 4;\n\n  static identity() {\n    // prettier-ignore\n    return [\n      1,  0,  0,  0,\n      0,  1,  0,  0,\n      0,  0,  1,  0,\n      0,  0,  0,  1\n    ];\n  }\n\n\n  /*\n   * Transformation matrices\n   */\n\n  static scale = (s1: number, s2: number, s3: number) => {\n    // prettier-ignore\n    return [\n      s1, 0,  0,  0,\n      0,  s2, 0,  0,\n      0,  0,  s3, 0,\n      0,  0,  0,  1\n    ];\n  }\n\n  static translation(tx: number, ty: number, tz: number) {\n    // prettier-ignore\n    return [\n      1,  0,  0,  0,\n      0,  1,  0,  0,\n      0,  0,  1,  0,\n      tx, ty, tz, 1\n    ];\n  }\n\n  static xRotation(angle: number) {\n    const angleInRadians = toRadian(angle);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n\n    // prettier-ignore\n    return [\n      1,  0,  0,  0,\n      0,  c,  s,  0,\n      0,  -s, c,  0,\n      0,  0,  0,  1\n    ];\n  }\n\n  static yRotation(angle: number) {\n    const angleInRadians = toRadian(angle);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n\n    // prettier-ignore\n    return [\n      c,  0,  -s, 0,\n      0,  1,  0,  0,\n      s,  0,  c,  0,\n      0,  0,  0,  1\n    ];\n  }\n\n  static zRotation(angle: number) {\n    const angleInRadians = toRadian(angle);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n\n    // prettier-ignore\n    return [\n      c,  s,  0,  0,\n      -s, c,  0,  0,\n      0,  0,  1,  0,\n      0,  0,  0,  1\n    ];\n  }\n\n\n  /*\n   * Projection matrices\n   */\n\n  static orthographicProj = (left: number = -1, right: number = 1,\n      bottom: number = -1, top: number = 1, near: number = -15, far: number = 15) => {\n\n    // Initial check\n    if (left == right || bottom == top || near == far) {\n      throw \"mat4.orthographicProj: invalid parameter(s)\";\n    }\n\n    // Calculate width, height, and depth\n    // Notes: far and near coordinates is reversed from z axis (z+ is -, vice versa)\n    const width = right - left;\n    const height = top - bottom;\n    const depth = far - near;\n\n    // prettier-ignore\n    return [\n      2 / width, 0, 0, 0,\n      0, 2 / height, 0, 0,\n      0, 0, -2 / depth, 0,\n      - (left + right) / width, - (top + bottom) / width, - (near + far) / depth,  1\n    ];\n  }\n\n  static obliqueProj = (theta: number = 10, phi: number = 10, left: number = -1, right: number = 1,\n      bottom: number = -1, top: number = 1, near: number = -15, far: number = 15) => {\n    // Notes: theta and phi is in degree, it is assumed that the cot of theta and phi is not infinity\n\n    // Convert theta and phi to radian\n    const ctgTheta = 1 / Math.tan(toRadian(theta));\n    const ctgPhi = 1 / Math.tan(toRadian(phi));\n\n    // Oblique == shear + orthographic\n    // prettier-ignore\n    return mat4.multiply(\n      mat4.orthographicProj(),\n      [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        -ctgTheta, -ctgPhi, 1, 0,\n        0, 0, 0, 1,\n      ]\n    );\n  }\n\n  static perspectiveProj = (fov: number = 90, aspect: number = 1, near: number = 0.01, far: number = 20) => {\n    // Notes: fov is in degree, it is assumed that the cot of fov is not infinity\n\n    const ctgHalfFov = 1 / Math.tan(toRadian(fov) / 2);\n    const depth = far - near;\n\n    // prettier-ignore\n    return [\n      ctgHalfFov / aspect, 0, 0, 0,\n      0, ctgHalfFov, 0, 0,\n      0, 0, - (near + far) / depth, -1,\n      0, 0, -2 * near * far / depth, 0,\n    ];\n  }\n\n\n  /*\n   * View matrix (used to control the camera)\n   */\n\n  static lookAt = (eye: Point, target: Point = [0, 0, 0], up: Point = [0, 1, 0]) => {\n    // Initial check\n    if (vec.equal(eye, target)) {\n      return mat4.identity();\n    }\n\n    var camView = vec.normalize(vec.sub(eye, target));\n    var camNorm = vec.normalize(vec.cross(up, camView));\n    var camUp = vec.normalize(vec.cross(camView, camNorm));\n\n    return mat4.inverse([\n       camNorm[0], camNorm[1], camNorm[2], 0,\n       camUp[0], camUp[1], camUp[2], 0,\n       camView[0], camView[1], camView[2], 0,\n       eye[0], eye[1], eye[2], 1,\n    ]);\n  }\n\n  private static submatrix3x3Det = (m: Matrix, ir: number, jr: number): number => {\n    // Get determinant of 3x3 submatrix of matrix 4x4 (removing row ir and col jr)\n    let sm = [];\n    let counter = 0;\n    for (let i = 0; i < 4; i++) {\n      if (i == ir) {\n        counter += 4;\n        continue;\n      }\n\n      let row = [];\n      for (let j = 0; j < 4; j++) {\n        if (j == jr) {\n          counter++;\n          continue;\n        }\n\n        row.push(m[counter]);\n        counter++;\n      }\n      sm.push(row);\n    }\n\n    return ((sm[0][0] * sm[1][1] * sm[2][2]) + (sm[0][1] * sm[1][2] * sm[2][0]) + (sm[0][2] * sm[1][0] * sm[2][1])\n      - (sm[0][2] * sm[1][1] * sm[2][0]) - (sm[0][1] * sm[1][0] * sm[2][2]) - (sm[0][0] * sm[1][2] * sm[2][1]));\n  }\n\n  static inverse = (m: Matrix): Matrix => {\n    let adjM = Array(16);\n    let det = 0;\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const koef = (i + j) % 2 == 0 ? 1 : -1;\n        const elem = koef * mat4.submatrix3x3Det(m, i, j);\n        if (j == 0) {\n          det += m[i * 4 + j] * elem;\n        }\n        adjM[j * 4 + i] = elem;\n      }\n    }\n\n    return adjM.map(el => el / det);\n  }\n\n\n  /*\n   * Utilities\n   */\n\n  static multiply = (matA: Matrix, matB: Matrix): Matrix => {\n    const out = [];\n    for (let i = 0; i < mat4.dimention; i++) {\n      for (let j = 0; j < mat4.dimention; j++) {\n        let temp = 0;\n        for (let k = 0; k < mat4.dimention; k++) {\n          temp += matA[i * mat4.dimention + k] * matB[k * mat4.dimention + j];\n        }\n        out.push(temp);\n      }\n    }\n    return out;\n  }\n\n  static mMult = (...args: Matrix[]) => {\n    let temp = args[0];\n    for (let i = 1; i < args.length; i++) {\n      temp = mat4.multiply(temp, args[i]);\n    }\n    return temp;\n  }\n}\n\nexport {mat4};\n","import {toCartesian} from \"../util/convert\";\nimport {mat4} from \"../util/matrix\";\n\nabstract class Shape {\n  // Webgl properties\n  protected gl: WebGL2RenderingContext;\n  protected program: WebGLProgram;\n\n  // Shape properties\n  protected dimention: number = 3;\n  protected points: number[] = [];\n  protected normals: number[] = [];\n\n  // Phong properties (light and material properties, light position)\n  protected Id: Color = [0.1953125, 0.50390625, 0.65625];\n  protected Is: Color = [0.6171875, 0.87109375, 0.99609375];\n  protected Ia: Color = [0.1953125, 0.50390625, 0.65625];\n  protected Kd: number[] = [1.0, 1.0, 1.0];\n  protected Ks: number[] = [1.0, 1.0, 1.0];\n  protected Ka: number[] = [0.25, 0.25, 0.25];\n  protected lightPosition: number[] = [1.0, 1.0, 1.0];\n  protected shininess: number = 100;\n\n  // Object transformations\n  protected translate: Point = [0, 0, 0];\n  protected rotate: Point = [0, 0, 0];\n  protected scale: Point = [1, 1, 1];\n  protected zoom: number = 1;\n\n  // Camera position or eye value (in spherical coordinate), format: (radius, theta, phi)\n  protected cameraPosition: [number, number, number] = [0, 0, 0];\n\n  // Matrices used\n  protected transformMatrix: number[] = mat4.identity();\n  protected viewMatrix: number[] = mat4.identity();\n  protected projMatrix: number[] = mat4.orthographicProj();\n\n  private useShading: 0 | 1 = 1;\n\n  constructor(protected canvas: HTMLCanvasElement) {\n    canvas.width = 800;\n    canvas.height = 800;\n\n    this.gl = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\n    this.gl.viewport(0, 0, canvas.width, canvas.height);\n    this.gl.enable(this.gl.DEPTH_TEST);\n    this.program = this.createProgram();\n    this.initMainShader(this.program);\n\n    this.calculateTransformMatrix();\n    this.calculateViewMatrix();\n    this.calculateWorldMatrix();\n    this.calculateProjectionMatrix();\n\n    this.setPhongProperties();\n    this.setUseShading(true);\n  }\n\n  protected initMainShader(program: WebGLProgram) {\n    const gl = this.gl;\n    const vShader = this.createCompiledShader(\n      gl.VERTEX_SHADER,\n      `\n      attribute vec3 position;\n      attribute vec3 vertNormal;\n\n      varying vec3 fragColor;\n      uniform vec3 lightPosition;\n      uniform int useShading;\n\n      // Light properties\n      uniform vec3 Id;\n      uniform vec3 Is;\n      uniform vec3 Ia;\n\n      // Material properties\n      uniform vec3 Kd;\n      uniform vec3 Ks;\n      uniform vec3 Ka;\n      uniform float shininess;\n\n      // Position matrices\n      uniform mat4 mTransform;\n      uniform mat4 mWorld;\n      uniform mat4 mView;\n      uniform mat4 mProj;\n\n      void main() {\n        gl_Position = mProj * mView * mWorld * mTransform * vec4(position, 1);\n\n        if (useShading == 1) {\n          // Build blinn phong model\n          vec3 vertPos = (mView * mWorld * mTransform * vec4(position, 1)).xyz;\n          vec3 L = normalize((mView * vec4(lightPosition, 1)).xyz - vertPos);\n          vec3 V = normalize(-vertPos);\n          vec3 H = normalize(L + V);\n          vec3 N = normalize((mView * mWorld * mTransform * vec4(vertNormal, 0)).xyz);\n\n          vec3 diffuse = Kd * Id * max(dot(L, N), 0.0);\n          vec3 specular = Ks * Is * pow(max(dot(N, H), 0.0), shininess);\n          vec3 ambient = Ka * Ia;\n\n          fragColor = diffuse + specular + ambient;\n        } else {\n          fragColor = vec3(0, 0, 0);\n        }\n      }\n      `,\n    );\n    const fShader = this.createCompiledShader(\n      gl.FRAGMENT_SHADER,\n      `\n      precision mediump float;\n\n      varying vec3 fragColor;\n\n      void main() {\n        gl_FragColor = vec4(fragColor, 1);\n      }\n      `,\n    );\n    this.setupProgram(program, vShader, fShader);\n  }\n\n  public setTransformation(transformationType: Transformation, newArr: Point) {\n    switch (transformationType) {\n      case \"rotate\":\n        this.rotate = newArr;\n        break;\n      case \"scale\":\n        this.scale = newArr;\n        break;\n      case \"translate\":\n        this.translate = newArr;\n        break;\n      default:\n        throw `shape.setTransformation: invalid transformation type '${transformationType}'`;\n    }\n    this.calculateTransformMatrix();\n  }\n\n  public getTransformation(transformationType: Transformation) {\n    switch (transformationType) {\n      case \"rotate\":\n        return this.rotate;\n      case \"scale\":\n        return this.scale;\n      case \"translate\":\n        return this.translate;\n      default:\n        throw `shape.getTransformation: invalid transformation type '${transformationType}'`;\n    }\n  }\n\n  protected calculateWorldMatrix() {\n    const worldMatrixPos = this.gl.getUniformLocation(this.program, \"mWorld\");\n    const worldMatrix = new Float32Array(mat4.identity());\n    this.gl.uniformMatrix4fv(worldMatrixPos, false, worldMatrix);\n  }\n\n  protected calculateTransformMatrix() {\n    this.transformMatrix = mat4.mMult(\n      mat4.xRotation(this.rotate[0]),\n      mat4.yRotation(this.rotate[1]),\n      mat4.zRotation(this.rotate[2]),\n      mat4.scale(...this.scale),\n      mat4.translation(...this.translate),\n    );\n    const gl = this.gl;\n\n    const transformMatrixPos = gl.getUniformLocation(this.program, \"mTransform\");\n\n    const transformMatrix = new Float32Array(this.transformMatrix);\n\n    this.gl.uniformMatrix4fv(transformMatrixPos, false, transformMatrix);\n  }\n\n  public setProjection(projectionType: Projection) {\n    switch (projectionType) {\n      case \"orthographic\":\n        this.projMatrix = mat4.orthographicProj();\n        break;\n      case \"oblique\":\n        this.projMatrix = mat4.obliqueProj();\n        break;\n      case \"perspective\":\n        this.projMatrix = mat4.perspectiveProj();\n        break;\n      default:\n        throw `shape.setProjection: invalid projection type '${projectionType}'`;\n    }\n    this.calculateProjectionMatrix();\n  }\n\n  protected calculateProjectionMatrix() {\n    const projMatrixPos = this.gl.getUniformLocation(this.program, \"mProj\");\n    const projMatrix = new Float32Array(this.projMatrix);\n    this.gl.uniformMatrix4fv(projMatrixPos, false, projMatrix);\n  }\n\n  public setCamera(cameraSettingType: CameraSetting, newValue: number) {\n    // Notes: newValue can be radius, theta (in degree), and phi (in degree)\n\n    switch (cameraSettingType) {\n      case \"radius\":\n        this.cameraPosition[0] = newValue;\n        break;\n      case \"theta\":\n        this.cameraPosition[1] = newValue;\n        break;\n      case \"phi\":\n        this.cameraPosition[2] = newValue;\n        break;\n      default:\n        throw `shape.setCamera: invalid camera setting type '${cameraSettingType}'`;\n    }\n    this.calculateViewMatrix();\n  }\n\n  protected calculateViewMatrix() {\n    this.viewMatrix = mat4.lookAt(toCartesian(this.cameraPosition) as Point);\n    const viewMatrixPos = this.gl.getUniformLocation(this.program, \"mView\");\n    const viewMatrix = new Float32Array(this.viewMatrix);\n    this.gl.uniformMatrix4fv(viewMatrixPos, false, viewMatrix);\n  }\n\n  public render(mode: number, startingIdx: number, size: number) {\n    this.gl.drawArrays(mode, startingIdx, size);\n  }\n\n  public setPoints(...points: number[]) {\n    this.points = points;\n  }\n\n  public setNormals(...normals: number[]) {\n    this.normals = normals;\n  }\n\n  public abstract setupPoints(): void;\n\n  public abstract draw(): void;\n\n  mapColor(color: number[]) {\n    return color.map((elmt) => (elmt % 256) / 255);\n  }\n\n  changePosition(vertexData: number[]) {\n    const {gl, program} = this;\n    const buffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexData), gl.STATIC_DRAW);\n\n    const positionPos = gl.getAttribLocation(program, \"position\");\n    gl.enableVertexAttribArray(positionPos);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.vertexAttribPointer(positionPos, this.dimention, gl.FLOAT, false, 0, 0);\n\n    return buffer;\n  }\n\n  changeNormal(normalData: number[]) {\n    const {gl, program} = this;\n    const buffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n\n    const normalPos = gl.getAttribLocation(program, \"vertNormal\");\n    gl.enableVertexAttribArray(normalPos);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.vertexAttribPointer(normalPos, this.dimention, gl.FLOAT, false, 0, 0);\n\n    return buffer;\n  }\n\n  setPhongProperties() {\n    const {gl, program} = this;\n\n    gl.uniform3fv(gl.getUniformLocation(program, \"Id\"), new Float32Array(this.Id));\n    gl.uniform3fv(gl.getUniformLocation(program, \"Is\"), new Float32Array(this.Is));\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ia\"), new Float32Array(this.Ia));\n\n    gl.uniform3fv(gl.getUniformLocation(program, \"Kd\"), new Float32Array(this.Kd));\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ks\"), new Float32Array(this.Ks));\n    gl.uniform3fv(gl.getUniformLocation(program, \"Ka\"), new Float32Array(this.Ka));\n\n    gl.uniform3fv(\n      gl.getUniformLocation(program, \"lightPosition\"),\n      new Float32Array(this.lightPosition),\n    );\n\n    gl.uniform1f(gl.getUniformLocation(program, \"shininess\"), this.shininess);\n  }\n\n  setUseShading(useShading: boolean) {\n    const {gl, program} = this;\n\n    this.useShading = useShading ? 1 : 0;\n    gl.uniform1i(gl.getUniformLocation(program, \"useShading\"), this.useShading);\n  }\n\n  createCompiledShader(type: number, sourceCode: string) {\n    const gl = this.gl;\n    const shader = gl.createShader(type);\n    if (!shader) {\n      const shaderTypeString = type == gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\n      throw `shape.createCompiledShader: error while creating ${shaderTypeString} shader`;\n    }\n    gl.shaderSource(shader, sourceCode);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  setupProgram(program: WebGLProgram, vShader: WebGLShader, fShader: WebGLShader) {\n    this.gl.attachShader(program, vShader);\n    this.gl.attachShader(program, fShader);\n    this.gl.linkProgram(program);\n    this.gl.useProgram(program);\n  }\n\n  createProgram() {\n    const program = this.gl.createProgram();\n    if (!program) {\n      throw \"shape.createProgram: no program!\";\n    }\n    return program;\n  }\n}\n\nexport default Shape;\n","import {createSquare2D} from \"./initialPoints/util\";\nimport Shape from \"./shape\";\n\nclass Cube extends Shape {\n  constructor(canvas: HTMLCanvasElement, private size: number, private thickness: number) {\n    super(canvas);\n    this.setupPoints();\n  }\n\n  public setSize(size: number) {\n    this.size = size;\n    this.setupPoints();\n  }\n\n  setupPoints() {\n    const halfSize = this.size / 2;\n    const halfThicc = this.thickness / 2;\n    // half size min half thickness\n    const sizemt = halfSize - halfThicc;\n\n    this.points = [\n      // front - back\n      ...createSquare2D(\n        [-sizemt, sizemt, halfSize],\n        [sizemt, sizemt, halfSize],\n        [sizemt, -sizemt, halfSize],\n        [-sizemt, -sizemt, halfSize],\n        halfThicc,\n        \"front\",\n      ),\n      ...createSquare2D(\n        [-sizemt, sizemt, halfSize - this.thickness],\n        [sizemt, sizemt, halfSize - this.thickness],\n        [sizemt, -sizemt, halfSize - this.thickness],\n        [-sizemt, -sizemt, halfSize - this.thickness],\n        halfThicc,\n        \"front\",\n      ),\n      ...createSquare2D(\n        [-sizemt, sizemt, -halfSize],\n        [sizemt, sizemt, -halfSize],\n        [sizemt, -sizemt, -halfSize],\n        [-sizemt, -sizemt, -halfSize],\n        halfThicc,\n        \"front\",\n      ),\n      ...createSquare2D(\n        [-sizemt, sizemt, -halfSize + this.thickness],\n        [sizemt, sizemt, -halfSize + this.thickness],\n        [sizemt, -sizemt, -halfSize + this.thickness],\n        [-sizemt, -sizemt, -halfSize + this.thickness],\n        halfThicc,\n        \"front\",\n      ),\n      // sides\n      ...createSquare2D(\n        [-halfSize, sizemt, sizemt],\n        [-halfSize, sizemt, -sizemt],\n        [-halfSize, -sizemt, -sizemt],\n        [-halfSize, -sizemt, sizemt],\n        halfThicc,\n        \"side\",\n      ),\n      ...createSquare2D(\n        [-halfSize + this.thickness, sizemt, sizemt],\n        [-halfSize + this.thickness, sizemt, -sizemt],\n        [-halfSize + this.thickness, -sizemt, -sizemt],\n        [-halfSize + this.thickness, -sizemt, sizemt],\n        halfThicc,\n        \"side\",\n      ),\n      ...createSquare2D(\n        [halfSize, sizemt, sizemt],\n        [halfSize, sizemt, -sizemt],\n        [halfSize, -sizemt, -sizemt],\n        [halfSize, -sizemt, sizemt],\n        halfThicc,\n        \"side\",\n      ),\n      ...createSquare2D(\n        [halfSize - this.thickness, sizemt, sizemt],\n        [halfSize - this.thickness, sizemt, -sizemt],\n        [halfSize - this.thickness, -sizemt, -sizemt],\n        [halfSize - this.thickness, -sizemt, sizemt],\n        halfThicc,\n        \"side\",\n      ),\n      // bottom - top\n      ...createSquare2D(\n        [-sizemt, halfSize, -sizemt],\n        [sizemt, halfSize, -sizemt],\n        [sizemt, halfSize, sizemt],\n        [-sizemt, halfSize, sizemt],\n        halfThicc,\n        \"ground\",\n      ),\n      ...createSquare2D(\n        [-sizemt, halfSize - this.thickness, -sizemt],\n        [sizemt, halfSize - this.thickness, -sizemt],\n        [sizemt, halfSize - this.thickness, sizemt],\n        [-sizemt, halfSize - this.thickness, sizemt],\n        halfThicc,\n        \"ground\",\n      ),\n      ...createSquare2D(\n        [-sizemt, -halfSize, -sizemt],\n        [sizemt, -halfSize, -sizemt],\n        [sizemt, -halfSize, sizemt],\n        [-sizemt, -halfSize, sizemt],\n        halfThicc,\n        \"ground\",\n      ),\n      ...createSquare2D(\n        [-sizemt, -halfSize + this.thickness, -sizemt],\n        [sizemt, -halfSize + this.thickness, -sizemt],\n        [sizemt, -halfSize + this.thickness, sizemt],\n        [-sizemt, -halfSize + this.thickness, sizemt],\n        halfThicc,\n        \"ground\",\n      ),\n    ];\n  }\n  public draw() {\n    const vertexData = this.points;\n\n    this.changePosition(vertexData);\n\n    // loop to draw cube side(rusuk), each as a rectangle.\n    // To draw a rectangle needs 4 points, and each cube' face(sisi) has 4 side,\n    // In total 6 faces x 4 sides = 24.\n    for (var i = 0; i < this.points.length / this.dimention; i++) {\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\n    }\n  }\n}\n\nexport default Cube;\n","import {mat4} from \"../util/matrix\";\nimport {createSquare2D} from \"./initialPoints/util\";\nimport Shape from \"./shape\";\n\nclass Block extends Shape {\n  constructor(\n    canvas: HTMLCanvasElement,\n    private length: number,\n    private height: number,\n    private width: number,\n    private thickness: number,\n  ) {\n    super(canvas);\n    this.setupPoints();\n  }\n\n  public setLength(length: number) {\n    this.length = length;\n    this.setupPoints();\n  }\n\n  public setWidth(width: number) {\n    this.width = width;\n    this.setupPoints();\n  }\n\n  public setHeight(height: number) {\n    this.height = height;\n    this.setupPoints();\n  }\n\n  setupPoints() {\n    const {width, height, length, thickness} = this;\n    // length min thickness, len plus thickness, and so on...\n    const halflen = length / 2;\n    const halfhei = height / 2;\n    const halfwid = width / 2;\n    const halfthicc = thickness / 2;\n    const lenmt = halflen - halfthicc;\n    const heimt = halfhei - halfthicc;\n    const widmt = halfwid - halfthicc;\n    //prettier-ignore\n    this.points = [\n      // front - back\n      ...createSquare2D([-lenmt, heimt, halfwid], [lenmt, heimt, halfwid], [lenmt, -heimt, halfwid], [-lenmt, -heimt, halfwid], halfthicc, \"front\"),\n      ...createSquare2D([-lenmt, heimt, halfwid-thickness], [lenmt, heimt, halfwid-thickness], [lenmt, -heimt, halfwid-thickness], [-lenmt, -heimt, halfwid-thickness], halfthicc, \"front\"),\n      ...createSquare2D([-lenmt, heimt, -halfwid], [lenmt, heimt, -halfwid], [lenmt, -heimt, -halfwid], [-lenmt, -heimt, -halfwid], halfthicc, \"front\"),\n      ...createSquare2D([-lenmt, heimt, -halfwid + thickness], [lenmt, heimt, -halfwid+ thickness], [lenmt, -heimt, -halfwid+ thickness], [-lenmt, -heimt, -halfwid+ thickness], halfthicc, \"front\"),\n\n      // sides\n      ...createSquare2D([-halflen, heimt, widmt], [-halflen, heimt, -widmt], [-halflen, -heimt, -widmt], [-halflen, -heimt, widmt], halfthicc, \"side\"),\n      ...createSquare2D([-halflen+thickness, heimt, widmt], [-halflen+thickness, heimt, -widmt], [-halflen+thickness, -heimt, -widmt], [-halflen+thickness, -heimt, widmt], halfthicc, \"side\"),\n      ...createSquare2D([halflen, heimt, widmt], [halflen, heimt, -widmt], [halflen, -heimt, -widmt], [halflen, -heimt, widmt], halfthicc, \"side\"),\n      ...createSquare2D([halflen - thickness, heimt, widmt], [halflen- thickness, heimt, -widmt], [halflen- thickness, -heimt, -widmt], [halflen- thickness, -heimt, widmt], halfthicc, \"side\"),\n      // bottom - top\n      ...createSquare2D([-lenmt, halfhei-thickness, -widmt], [lenmt, halfhei-thickness, -widmt], [lenmt, halfhei-thickness, widmt], [-lenmt, halfhei-thickness, widmt], halfthicc, \"ground\"),\n      ...createSquare2D([-lenmt, -halfhei + thickness, -widmt], [lenmt, -halfhei + thickness, -widmt], [lenmt, -halfhei + thickness, widmt], [-lenmt, -halfhei + thickness, widmt], halfthicc, \"ground\"),\n    ]\n  }\n\n  public draw() {\n    this.changePosition(this.points);\n\n    // loop to draw cube side(rusuk), each as a rectangle.\n    // To draw a rectangle needs 4 points, and each cube' face(sisi) has 4 side,\n    // In total 6 faces x 4 sides = 24.\n    for (var i = 0; i < this.points.length / this.dimention; i++) {\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\n    }\n  }\n}\n\nexport default Block;\n","import {vec} from \"../../util/vector\";\n\n/*\n * Triangular Prism\n */\n\n// Type declaration\n// TODO: maybe can be reused\ntype TrianglePoints = {v1: Point; v2: Point; v3: Point};\n\n/*\n * @param radius distance from (x,z)=(0,0) to vertices\n * @param y vertical position\n * @param x x coord of the central of the triangle\n * @param z z coord of the central of the triangle\n */\nconst generateTrianglePoints = (\n  radius: number,\n  y: number,\n  x: number = 0,\n  z: number = 0,\n): TrianglePoints => {\n  const radiusSin30 = radius * 0.5;\n  const radiusCos30 = radius * 0.5 * Math.sqrt(3);\n\n  return {\n    // near\n    v1: [x, y, z + radius],\n    // far left\n    v2: [x - radiusCos30, y, z - radiusSin30],\n    // far right\n    v3: [x + radiusCos30, y, z - radiusSin30],\n  };\n};\n\n/*\n * @param p1 the first point\n * @param p2 the second point\n * @param p3 the third point\n * @param p4 the fourth point\n */\nconst buildQuad = (\n  p1: Point,\n  p2: Point,\n  p3: Point,\n  p4: Point,\n  normalArray: number[],\n  reversed: boolean = false,\n) => {\n  const temp1 = vec.sub(p2, p1);\n  const temp2 = vec.sub(p4, p1);\n  const normalDir = reversed ? -1 : 1;\n  const normal = vec.mul(normalDir, vec.cross(temp1, temp2));\n\n  normalArray.push(...normal, ...normal, ...normal, ...normal);\n\n  if (reversed) {\n    return [...p4, ...p3, ...p2, ...p1];\n  } else {\n    return [...p1, ...p2, ...p3, ...p4];\n  }\n};\n\n/*\n * @param innerTriangle the inner hollow triangle boundary\n * @param outerTriangle the outer hollow triangle boundary\n * @param reversed is quad reversed\n */\nconst buildHollowTriangle = (\n  innerTriangle: TrianglePoints,\n  outerTriangle: TrianglePoints,\n  normalArray: number[],\n  reversed: boolean = false,\n) => {\n  return [\n    ...buildQuad(\n      outerTriangle.v1,\n      innerTriangle.v1,\n      innerTriangle.v2,\n      outerTriangle.v2,\n      normalArray,\n      reversed,\n    ),\n    ...buildQuad(\n      outerTriangle.v2,\n      innerTriangle.v2,\n      innerTriangle.v3,\n      outerTriangle.v3,\n      normalArray,\n      reversed,\n    ),\n    ...buildQuad(\n      outerTriangle.v3,\n      innerTriangle.v3,\n      innerTriangle.v1,\n      outerTriangle.v1,\n      normalArray,\n      reversed,\n    ),\n  ];\n};\n\n/*\n * @param t1 the first triangle to be connected\n * @param t2 the second triangle to be connected\n */\nconst buildTriangleConnector = (\n  t1: TrianglePoints,\n  t2: TrianglePoints,\n  normalArray: number[],\n  reversed: boolean = false,\n) => {\n  return [\n    ...buildQuad(t1.v1, t2.v1, t2.v3, t1.v3, normalArray, reversed),\n    ...buildQuad(t1.v3, t2.v3, t2.v2, t1.v2, normalArray, reversed),\n    ...buildQuad(t1.v2, t2.v2, t2.v1, t1.v1, normalArray, reversed),\n  ];\n};\n\ninterface ITrianglePoints {\n  inner: TrianglePoints[];\n  outer: TrianglePoints[];\n}\n\n// 8 triangle points to be used as reference\nconst trianglesPoints: ITrianglePoints = {\n  inner: [\n    generateTrianglePoints(0.4, 0.6),\n    generateTrianglePoints(0.4, 0.5),\n    generateTrianglePoints(0.4, -0.5),\n    generateTrianglePoints(0.4, -0.6),\n  ],\n  outer: [\n    generateTrianglePoints(0.6, 0.6),\n    generateTrianglePoints(0.6, 0.5),\n    generateTrianglePoints(0.6, -0.5),\n    generateTrianglePoints(0.6, -0.6),\n  ],\n};\n\n// Vertical structure triangle radius\n// 0.2 = r + r*sin30\n// r = 0.2 / (1 + sin30) = 0.2 / 1.5\nconst vsTriangleRadius = 0.2 / 1.5;\n\n// Vertical structure triangle center for near, far left, and far right\nconst vsTriangleRadiusSin30 = vsTriangleRadius * 0.5;\nconst vsTriangleRadiusCos30 = vsTriangleRadius * 0.5 * Math.sqrt(3);\nconst vsTriangleCenter = [\n  {x: 0, z: 0.6 - vsTriangleRadius}, // near\n  {\n    x: trianglesPoints.outer[0].v2[0] + vsTriangleRadiusCos30,\n    z: trianglesPoints.outer[0].v2[2] + vsTriangleRadiusSin30,\n  }, // far left\n  {\n    x: trianglesPoints.outer[0].v3[0] - vsTriangleRadiusCos30,\n    z: trianglesPoints.outer[0].v3[2] + vsTriangleRadiusSin30,\n  }, // far right\n];\n\nlet triangularPrismNormals: number[] = [];\n// prettier-ignore\nconst triangularPrismPoints = [\n  // Top triangle structure\n  ...buildHollowTriangle(trianglesPoints.inner[0], trianglesPoints.outer[0], triangularPrismNormals),\n  ...buildHollowTriangle(trianglesPoints.inner[1], trianglesPoints.outer[1], triangularPrismNormals, true),\n  ...buildTriangleConnector(trianglesPoints.inner[0], trianglesPoints.inner[1], triangularPrismNormals, true),\n  ...buildTriangleConnector(trianglesPoints.outer[0], trianglesPoints.outer[1], triangularPrismNormals),\n  // Bottom triangle structure\n  ...buildHollowTriangle(trianglesPoints.inner[2], trianglesPoints.outer[2], triangularPrismNormals),\n  ...buildHollowTriangle(trianglesPoints.inner[3], trianglesPoints.outer[3], triangularPrismNormals, true),\n  ...buildTriangleConnector(trianglesPoints.inner[2], trianglesPoints.inner[3], triangularPrismNormals, true),\n  ...buildTriangleConnector(trianglesPoints.outer[2], trianglesPoints.outer[3], triangularPrismNormals),\n  // Vertical structure\n  ...buildTriangleConnector(\n    generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[0].x, vsTriangleCenter[0].z),\n    generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[0].x, vsTriangleCenter[0].z),\n    triangularPrismNormals\n  ),\n  ...buildTriangleConnector(\n    generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[1].x, vsTriangleCenter[1].z),\n    generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[1].x, vsTriangleCenter[1].z),\n    triangularPrismNormals\n  ),\n  ...buildTriangleConnector(\n    generateTrianglePoints(vsTriangleRadius, 0.5, vsTriangleCenter[2].x, vsTriangleCenter[2].z),\n    generateTrianglePoints(vsTriangleRadius, -0.5, vsTriangleCenter[2].x, vsTriangleCenter[2].z),\n    triangularPrismNormals\n  ),\n];\n\nexport default {\n  points: triangularPrismPoints,\n  normals: triangularPrismNormals,\n};\n","import triangularPrism from \"./prismPoints\";\n// prettier-ignore\nexport {\n  triangularPrism,\n}\n","import Shape from \"./shape\";\n\nclass TriangularPrism extends Shape {\n  setupPoints() {}\n\n  // override\n  public draw() {\n    const vertexData = this.points;\n    const normalData = this.normals;\n\n    this.changePosition(vertexData);\n    this.changeNormal(normalData);\n\n    // render each rectangle separately\n    for (let i = 0; i < this.points.length / (this.dimention * 4); i++) {\n      this.render(this.gl.TRIANGLE_FAN, 4 * i, 4);\n    }\n  }\n}\n\nexport default TriangularPrism;\n","import App from \"./app\";\nimport Cube from \"./shapes/cube\";\nimport Block from \"./shapes/block\";\nimport {triangularPrism} from \"./shapes/initialPoints\";\nimport TriangularPrism from \"./shapes/triangularPrism\";\nimport Shape from \"./shapes/shape\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\n// function for debugging block / cube as well\nfunction initShape(shapeName: ShapeType): Shape {\n  let obj: Shape;\n  switch (shapeName) {\n    case \"block\":\n      obj = new Block(canvas, 0.8, 0.4, 0.4, 0.1);\n      break;\n    case \"cube\":\n      obj = new Cube(canvas, 0.6, 0.1);\n      break;\n    case \"prism\":\n      obj = new TriangularPrism(canvas);\n\n      obj.setPoints(...triangularPrism.points);\n      obj.setNormals(...triangularPrism.normals);\n      break;\n  }\n  return obj;\n}\n\n// Init default shapes\n// change this to prism later\nconst defaultObj = initShape(\"prism\");\n\n// Init app\nconst app = new App();\napp.setShape(defaultObj);\n\n// Pick hollow object buttons event handler\nconst prismBtn = document.getElementById(\"prism\") as HTMLElement;\nprismBtn.addEventListener(\"click\", () => {\n  app.resetAll();\n  app.setShape(initShape(\"prism\"));\n});\n\nconst cubeBtn = document.getElementById(\"cube\") as HTMLElement;\ncubeBtn.addEventListener(\"click\", () => {\n  app.resetAll();\n  app.setShape(initShape(\"cube\"));\n});\n\nconst blockBtn = document.getElementById(\"block\") as HTMLElement;\nblockBtn.addEventListener(\"click\", () => {\n  app.resetAll();\n  app.setShape(initShape(\"block\"));\n});\n\n// Perspective buttons event handler\nconst orthographicBtn = document.getElementById(\"orthographic\") as HTMLElement;\northographicBtn.addEventListener(\"click\", () => {\n  app.setShapeProjection(\"orthographic\");\n});\n\nconst obliqueBtn = document.getElementById(\"oblique\") as HTMLElement;\nobliqueBtn.addEventListener(\"click\", () => {\n  app.setShapeProjection(\"oblique\");\n});\n\nconst perspectiveBtn = document.getElementById(\"perspective\") as HTMLElement;\nperspectiveBtn.addEventListener(\"click\", () => {\n  app.setShapeProjection(\"perspective\");\n});\n\n// Reset button event handler\nconst resetBtn = document.getElementById(\"reset\") as HTMLElement;\nresetBtn.addEventListener(\"click\", () => {\n  app.resetShape();\n});\n\nconst camResetBtn = document.getElementById(\"cam-reset\") as HTMLElement;\ncamResetBtn.addEventListener(\"click\", () => {\n  app.resetCamera();\n});\n\n// Start app\napp.start();\n"]}